//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by the Pegasus Asset Compiler.
//     Monday, 18 August 2014, 14:35:13
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;

namespace Pegasus.Scripting
{
	using Pegasus;
	using Pegasus.Framework.UserInterface.Input;
	using Pegasus.Platform.Logging;
	using Pegasus.Scripting;
	using Pegasus.Scripting.Validators;

	internal static class Commands
	{
		/// <summary>
		///     
		/// </summary>
		public static Command ExitCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<string> HelpCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<string> ResetCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<string> ListCvarsCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<string> ListCommandsCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<string> ExecuteCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<string> ProcessCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<string> PersistCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command PrintAppInfoCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<InputTrigger, string> BindCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<InputTrigger> UnbindCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command UnbindAllCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command ListBindingsCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<bool> ShowConsoleCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command ReloadAssetsCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command RestartGraphicsCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<string> ToggleCommand { get; private set; }

		[DebuggerHidden]
		public static void Exit()
		{
			ExitCommand.Invoke();
		}

		[DebuggerHidden]
		public static void Help(string name = "")
		{
			Assert.ArgumentNotNull((object)name);
			HelpCommand.Invoke(name);
		}

		[DebuggerHidden]
		public static void Reset(string cvar)
		{
			Assert.ArgumentNotNull((object)cvar);
			ResetCommand.Invoke(cvar);
		}

		[DebuggerHidden]
		public static void ListCvars(string pattern = "*")
		{
			Assert.ArgumentNotNull((object)pattern);
			ListCvarsCommand.Invoke(pattern);
		}

		[DebuggerHidden]
		public static void ListCommands(string pattern = "*")
		{
			Assert.ArgumentNotNull((object)pattern);
			ListCommandsCommand.Invoke(pattern);
		}

		[DebuggerHidden]
		public static void Execute(string command)
		{
			Assert.ArgumentNotNull((object)command);
			ExecuteCommand.Invoke(command);
		}

		[DebuggerHidden]
		public static void Process(string fileName)
		{
			Assert.ArgumentNotNull((object)fileName);
			ProcessCommand.Invoke(fileName);
		}

		[DebuggerHidden]
		public static void Persist(string fileName)
		{
			Assert.ArgumentNotNull((object)fileName);
			PersistCommand.Invoke(fileName);
		}

		[DebuggerHidden]
		public static void PrintAppInfo()
		{
			PrintAppInfoCommand.Invoke();
		}

		[DebuggerHidden]
		public static void Bind(InputTrigger trigger, string command)
		{
			Assert.ArgumentNotNull((object)trigger);
			Assert.ArgumentNotNull((object)command);
			BindCommand.Invoke(trigger, command);
		}

		[DebuggerHidden]
		public static void Unbind(InputTrigger trigger)
		{
			Assert.ArgumentNotNull((object)trigger);
			UnbindCommand.Invoke(trigger);
		}

		[DebuggerHidden]
		public static void UnbindAll()
		{
			UnbindAllCommand.Invoke();
		}

		[DebuggerHidden]
		public static void ListBindings()
		{
			ListBindingsCommand.Invoke();
		}

		[DebuggerHidden]
		public static void ShowConsole(bool show)
		{
			Assert.ArgumentNotNull((object)show);
			ShowConsoleCommand.Invoke(show);
		}

		[DebuggerHidden]
		public static void ReloadAssets()
		{
			ReloadAssetsCommand.Invoke();
		}

		[DebuggerHidden]
		public static void RestartGraphics()
		{
			RestartGraphicsCommand.Invoke();
		}

		[DebuggerHidden]
		public static void Toggle(string cvar)
		{
			Assert.ArgumentNotNull((object)cvar);
			ToggleCommand.Invoke(cvar);
		}

		/// <summary>
		///     Raised when the 'Exit' command is invoked.
		/// </summary>
		public static event Action OnExit
		{
			add { ExitCommand.Invoked += value; }
			remove { ExitCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Help' command is invoked.
		/// </summary>
		public static event Action<string> OnHelp
		{
			add { HelpCommand.Invoked += value; }
			remove { HelpCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Reset' command is invoked.
		/// </summary>
		public static event Action<string> OnReset
		{
			add { ResetCommand.Invoked += value; }
			remove { ResetCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'ListCvars' command is invoked.
		/// </summary>
		public static event Action<string> OnListCvars
		{
			add { ListCvarsCommand.Invoked += value; }
			remove { ListCvarsCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'ListCommands' command is invoked.
		/// </summary>
		public static event Action<string> OnListCommands
		{
			add { ListCommandsCommand.Invoked += value; }
			remove { ListCommandsCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Execute' command is invoked.
		/// </summary>
		public static event Action<string> OnExecute
		{
			add { ExecuteCommand.Invoked += value; }
			remove { ExecuteCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Process' command is invoked.
		/// </summary>
		public static event Action<string> OnProcess
		{
			add { ProcessCommand.Invoked += value; }
			remove { ProcessCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Persist' command is invoked.
		/// </summary>
		public static event Action<string> OnPersist
		{
			add { PersistCommand.Invoked += value; }
			remove { PersistCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'PrintAppInfo' command is invoked.
		/// </summary>
		public static event Action OnPrintAppInfo
		{
			add { PrintAppInfoCommand.Invoked += value; }
			remove { PrintAppInfoCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Bind' command is invoked.
		/// </summary>
		public static event Action<InputTrigger, string> OnBind
		{
			add { BindCommand.Invoked += value; }
			remove { BindCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Unbind' command is invoked.
		/// </summary>
		public static event Action<InputTrigger> OnUnbind
		{
			add { UnbindCommand.Invoked += value; }
			remove { UnbindCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'UnbindAll' command is invoked.
		/// </summary>
		public static event Action OnUnbindAll
		{
			add { UnbindAllCommand.Invoked += value; }
			remove { UnbindAllCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'ListBindings' command is invoked.
		/// </summary>
		public static event Action OnListBindings
		{
			add { ListBindingsCommand.Invoked += value; }
			remove { ListBindingsCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'ShowConsole' command is invoked.
		/// </summary>
		public static event Action<bool> OnShowConsole
		{
			add { ShowConsoleCommand.Invoked += value; }
			remove { ShowConsoleCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'ReloadAssets' command is invoked.
		/// </summary>
		public static event Action OnReloadAssets
		{
			add { ReloadAssetsCommand.Invoked += value; }
			remove { ReloadAssetsCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'RestartGraphics' command is invoked.
		/// </summary>
		public static event Action OnRestartGraphics
		{
			add { RestartGraphicsCommand.Invoked += value; }
			remove { RestartGraphicsCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Toggle' command is invoked.
		/// </summary>
		public static event Action<string> OnToggle
		{
			add { ToggleCommand.Invoked += value; }
			remove { ToggleCommand.Invoked -= value; }
		}

		/// <summary>
		///     Initializes the instances declared by the registry.
		/// </summary>
		public static void Initialize()
		{
			ExitCommand = new Command("exit", "", false);
			HelpCommand = new Command<string>("help", "", false, 
				new CommandParameter("name", typeof(string), true, "", ""));
			ResetCommand = new Command<string>("reset", "", false, 
				new CommandParameter("cvar", typeof(string), false, default(string), "", new NotEmptyAttribute()));
			ListCvarsCommand = new Command<string>("list_cvars", "", false, 
				new CommandParameter("pattern", typeof(string), true, "*", "", new NotEmptyAttribute()));
			ListCommandsCommand = new Command<string>("list_commands", "", false, 
				new CommandParameter("pattern", typeof(string), true, "*", "", new NotEmptyAttribute()));
			ExecuteCommand = new Command<string>("execute", "", false, 
				new CommandParameter("command", typeof(string), false, default(string), "", new NotEmptyAttribute()));
			ProcessCommand = new Command<string>("process", "", false, 
				new CommandParameter("fileName", typeof(string), false, default(string), "", new NotEmptyAttribute(), new FileNameAttribute()));
			PersistCommand = new Command<string>("persist", "", false, 
				new CommandParameter("fileName", typeof(string), false, default(string), "", new NotEmptyAttribute(), new FileNameAttribute()));
			PrintAppInfoCommand = new Command("print_app_info", "", false);
			BindCommand = new Command<InputTrigger, string>("bind", "", false, 
				new CommandParameter("trigger", typeof(InputTrigger), false, default(InputTrigger), ""),
				new CommandParameter("command", typeof(string), false, default(string), "", new NotEmptyAttribute()));
			UnbindCommand = new Command<InputTrigger>("unbind", "", false, 
				new CommandParameter("trigger", typeof(InputTrigger), false, default(InputTrigger), ""));
			UnbindAllCommand = new Command("unbind_all", "", false);
			ListBindingsCommand = new Command("list_bindings", "", false);
			ShowConsoleCommand = new Command<bool>("show_console", "", false, 
				new CommandParameter("show", typeof(bool), false, default(bool), ""));
			ReloadAssetsCommand = new Command("reload_assets", "", false);
			RestartGraphicsCommand = new Command("restart_graphics", "", false);
			ToggleCommand = new Command<string>("toggle", "", false, 
				new CommandParameter("cvar", typeof(string), false, default(string), "", new NotEmptyAttribute()));

			CommandRegistry.Register(ExitCommand);
			CommandRegistry.Register(HelpCommand);
			CommandRegistry.Register(ResetCommand);
			CommandRegistry.Register(ListCvarsCommand);
			CommandRegistry.Register(ListCommandsCommand);
			CommandRegistry.Register(ExecuteCommand);
			CommandRegistry.Register(ProcessCommand);
			CommandRegistry.Register(PersistCommand);
			CommandRegistry.Register(PrintAppInfoCommand);
			CommandRegistry.Register(BindCommand);
			CommandRegistry.Register(UnbindCommand);
			CommandRegistry.Register(UnbindAllCommand);
			CommandRegistry.Register(ListBindingsCommand);
			CommandRegistry.Register(ShowConsoleCommand);
			CommandRegistry.Register(ReloadAssetsCommand);
			CommandRegistry.Register(RestartGraphicsCommand);
			CommandRegistry.Register(ToggleCommand);
		}

		/// <summary>
		///     Initializes the instances imported by the registry.
		/// </summary>
		public static void Resolve()
		{
		}
	}
}

