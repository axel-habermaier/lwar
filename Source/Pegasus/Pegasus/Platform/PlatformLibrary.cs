namespace Pegasus.Platform
{
	using System;
	using System.Diagnostics;
	using System.Runtime.InteropServices;
	using Graphics;
	using Logging;
	using Memory;
	using Network;
	using Rendering;
	using UserInterface;
	using Utilities;

	/// <summary>
	///     Represents an instance of the native platform library.
	/// </summary>
	internal class PlatformLibrary : DisposableObject
	{
		/// <summary>
		///     The name of the platform dynamic link library.
		/// </summary>
		public const string Name = "Platform";

		/// <summary>
		///     The log callback that has been passed to the native code. We must keep a reference in order to prevent
		///     the garbage collector from freeing the delegate while it is still being used by native code.
		/// </summary>
		private readonly NativeMethods.LogCallback _logCallback = OnLogged;

		/// <summary>
		///     Initializes a new instance.
		/// </summary>
		public unsafe PlatformLibrary()
		{
			Assert.That(!IsInitialized, "The native platform library has already been initialized.");

			NativeMethods.Initialize(_logCallback);
			IsInitialized = true;

			NativeMethods.ValidateInterfaceSizes(sizeof(DeviceInterface), sizeof(UdpInterface), sizeof(WindowInterface));
			NativeMethods.ValidateStructSizes(sizeof(BlendDescription), sizeof(BufferDescription), sizeof(Color),
				sizeof(DepthStencilDescription), sizeof(RasterizerDescription), sizeof(SamplerDescription),
				sizeof(StencilOperationDescription), sizeof(Surface), sizeof(TextureDescription),
				sizeof(TimestampDisjointQueryResult), sizeof(VertexBinding),
				sizeof(VertexLayoutDescription), Marshal.SizeOf(typeof(NativeMethods.WindowCallbacks)));
		}

		/// <summary>
		///     Gets a value indicating whether the SDL2 library is initialized.
		/// </summary>
		internal static bool IsInitialized { get; private set; }

		/// <summary>
		///     Invoked when the native library generates a log entry.
		/// </summary>
		/// <param name="type">The type of the generated log entry.</param>
		/// <param name="message">The message that has been generated.</param>
		[DebuggerHidden]
		private static void OnLogged(LogType type, string message)
		{
			Assert.InRange(type);
			Assert.ArgumentNotNullOrWhitespace(message);

			var logEntry = new LogEntry(type, NormalizeMessage(message));
			logEntry.RaiseLogEvent();
		}

		/// <summary>
		///     Normalizes the given message generated by the platform library.
		/// </summary>
		/// <param name="message">The message that should be normalized.</param>
		internal static string NormalizeMessage(string message)
		{
			Assert.ArgumentNotNull(message);
			message = message.Trim().Replace("\r", "");

			if (message.EndsWith(".."))
				return message.Substring(0, message.Length - 1);

			if (message.EndsWith(".") || message.EndsWith("!") || message.EndsWith("?"))
				return message;

			return message + ".";
		}

		/// <summary>
		///     Disposes the object, releasing all managed and unmanaged resources.
		/// </summary>
		protected override void OnDisposing()
		{
			NativeMethods.Shutdown();
			IsInitialized = false;
		}
	}
}
