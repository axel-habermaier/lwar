<#@ include file="../Framework/Platform/CodeModel.t4" #><# #>
<#@ assembly name="System.Xml" #><# #>
<#@ assembly name="System.Xml.Linq" #><# #>
<#@ import namespace="System.Xml" #><# #>
<#@ import namespace="System.Xml.Linq" #><# #>
<#@ import namespace="System.IO" #><# #>
using System;

namespace <#= Namespace #>
{
	using System.Collections.Generic;
	using Pegasus.AssetsCompiler;

	/// <summary>
	///   Provides access to all assets that should be compiled.
	/// </summary>
	public partial class <#= ClassName #> : IAssetList
	{
<# foreach (var asset in Assets) { #>
		private readonly Asset <#= asset.Object #> = new Asset("<#= asset.File #>");
<# } #>

		/// <summary>
		///   Initializes a new instance.
		/// </summary>
		public AssetList()
		{
			OverrideProcessors();
		}

		/// <summary>
		///   Gets all assets that should be compiled.
		/// </summary>
		public IEnumerable<Asset> Assets 
		{
			get
			{
<# foreach (var asset in Assets) { #>
				yield return <#= asset.Object #>;
<# } #><# #>
			}
		}

		/// <summary>
		///   Allows overriding the default asset processors of the assets.
		/// </summary>
		partial void OverrideProcessors();
	}
}

<#+

	protected struct Asset
	{
		public string File;

		public string Object
		{
			get
			{ 
				var name = File.Replace("/", "_").Replace(".", "_").Replace(" ", "_");
				var field = String.Empty;
				for (var i = 0; i < name.Length; ++i)
				{
					if (name[i] == '_')
						continue;
					else if (i != 0 && name[i - 1] == '_')
						field += Char.ToUpper(name[i]);
					else
						field += name[i];
				}

				return "_" + Char.ToLower(field[0]) + field.Substring(1);;
			}
		}

		public Asset(string file)
		{
			File = file.Replace("\\", "/");
		}
	}

	protected string Namespace;
	protected string ClassName = "AssetList";
	protected string AssetFile;

	protected IEnumerable<Asset> Assets
	{
		get
		{
			var root = XDocument.Load(Project.FullName).Root;
			XNamespace ns = "http://schemas.microsoft.com/developer/msbuild/2003";

			return root.Descendants(ns + "None")
					.Union(root.Descendants(ns + "Content"))
					.Select(element => element.Attribute("Include").Value)
					.Where(asset => !asset.EndsWith(".tt"))
					.Select(asset => new Asset(asset))
					.ToList();
		}
	}

#>