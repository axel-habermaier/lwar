//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by the Pegasus Asset Compiler.
//     Tuesday, 20 August 2013, 17:09:40
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using Pegasus;
using Pegasus.Math;
using Pegasus.Platform;
using Pegasus.Platform.Assets;
using Pegasus.Platform.Graphics;
using Pegasus.Platform.Memory;

namespace Lwar.Assets.Effects
{
	/// <summary>
	///   Applies a Gaussian blur filter to a texture.
	/// </summary>
	public sealed class BlurEffect : Effect
	{
		/// <summary>
		///   Initializes a new instance.
		/// </summary>
		/// <param name="graphicsDevice">The graphics device this instance belongs to.</param>
		/// <param name="assets">The assets manager that should be used to load required assets.</param>
		public BlurEffect(GraphicsDevice graphicsDevice, AssetsManager assets)
			: base(graphicsDevice, assets)
		{
			Gaussian = __context.CreateTechnique(__Bind,
				"Effects/BlurEffect.VertexShader", 
				"Effects/BlurEffect.GaussianBlur");
		}

		/// <summary> 
		///   The texture that is blurred.
		/// </summary>
		public Texture2DView Texture { get; set; }

		/// <summary>
		///   Applies a single-pass Gaussian blur filter.
		/// </summary>
		public EffectTechnique Gaussian { get; private set; }

		/// <summary>
		///   Binds all textures and non-shared constant buffers required by the effect.
		/// </summary>
		private void __Bind()
		{
			__context.Bind(Texture, 0);
		}
	}
}

namespace Lwar.Assets.Effects
{
	public sealed class ParallaxEffect : Effect
	{
		/// <summary>
		///   Initializes a new instance.
		/// </summary>
		/// <param name="graphicsDevice">The graphics device this instance belongs to.</param>
		/// <param name="assets">The assets manager that should be used to load required assets.</param>
		public ParallaxEffect(GraphicsDevice graphicsDevice, AssetsManager assets)
			: base(graphicsDevice, assets)
		{
			Default = __context.CreateTechnique(__Bind,
				"Effects/ParallaxEffect.VertexShader", 
				"Effects/ParallaxEffect.FragmentShader");
		}

		public Texture2DView TextureAtlas { get; set; }

		public EffectTechnique Default { get; private set; }

		/// <summary>
		///   Binds all textures and non-shared constant buffers required by the effect.
		/// </summary>
		private void __Bind()
		{
			__context.Bind(TextureAtlas, 0);
		}
	}
}

namespace Lwar.Assets.Effects
{
	public sealed class SkyboxEffect : Effect
	{
		/// <summary>
		///   Initializes a new instance.
		/// </summary>
		/// <param name="graphicsDevice">The graphics device this instance belongs to.</param>
		/// <param name="assets">The assets manager that should be used to load required assets.</param>
		public SkyboxEffect(GraphicsDevice graphicsDevice, AssetsManager assets)
			: base(graphicsDevice, assets)
		{
			Default = __context.CreateTechnique(__Bind,
				"Effects/SkyboxEffect.VertexShader", 
				"Effects/SkyboxEffect.FragmentShader");
		}

		public CubeMapView Skybox { get; set; }

		public EffectTechnique Default { get; private set; }

		/// <summary>
		///   Binds all textures and non-shared constant buffers required by the effect.
		/// </summary>
		private void __Bind()
		{
			__context.Bind(Skybox, 0);
		}
	}
}

namespace Lwar.Assets.Effects
{
	public sealed class SphereEffect : Effect
	{
		/// <summary>
		///   Indicates whether the contents of ConstantBuffer2 have changed.
		/// </summary>
		private bool __ConstantBuffer2Dirty = true;

		/// <summary>
		///   Indicates whether the contents of PlanetConstantBuffer have changed.
		/// </summary>
		private bool __PlanetConstantBufferDirty = true;

		/// <summary>
		///   Indicates whether the contents of ShieldConstantBuffer have changed.
		/// </summary>
		private bool __ShieldConstantBufferDirty = true;

		/// <summary>
		///   Passes the shader constants in the ConstantBuffer2 constant buffer to the GPU.
		/// </summary>
		private readonly ConstantBuffer _ConstantBuffer2;

		/// <summary>
		///   Passes the shader constants in the PlanetConstantBuffer constant buffer to the GPU.
		/// </summary>
		private readonly ConstantBuffer _PlanetConstantBuffer;

		/// <summary>
		///   Passes the shader constants in the ShieldConstantBuffer constant buffer to the GPU.
		/// </summary>
		private readonly ConstantBuffer _ShieldConstantBuffer;

		private Matrix _World;

		private Vector3 _SunPosition;

		private Vector3 _ImpactPosition;

		private float _TimeToLive;

		/// <summary>
		///   Initializes a new instance.
		/// </summary>
		/// <param name="graphicsDevice">The graphics device this instance belongs to.</param>
		/// <param name="assets">The assets manager that should be used to load required assets.</param>
		public unsafe SphereEffect(GraphicsDevice graphicsDevice, AssetsManager assets)
			: base(graphicsDevice, assets)
		{
			Default = __context.CreateTechnique(__Bind,
				"Effects/SphereEffect.VertexShader", 
				"Effects/SphereEffect.FragmentShader");
			Planet = __context.CreateTechnique(__Bind,
				"Effects/SphereEffect.VertexShaderPlanet", 
				"Effects/SphereEffect.FragmentShaderPlanet");
			Shield = __context.CreateTechnique(__Bind,
				"Effects/SphereEffect.VertexShaderShield", 
				"Effects/SphereEffect.FragmentShaderShield");

			_ConstantBuffer2 = __context.CreateConstantBuffer(64, 2);
			_ConstantBuffer2.SetName("used by Lwar.Assets.Effects.SphereEffect");

			_PlanetConstantBuffer = __context.CreateConstantBuffer(16, 3);
			_PlanetConstantBuffer.SetName("used by Lwar.Assets.Effects.SphereEffect");

			_ShieldConstantBuffer = __context.CreateConstantBuffer(16, 4);
			_ShieldConstantBuffer.SetName("used by Lwar.Assets.Effects.SphereEffect");
		}

		public Matrix World
		{
			get { return _World; }
			set
			{
				_World = value;
				__ConstantBuffer2Dirty = true;
			}
		}

		public Vector3 SunPosition
		{
			get { return _SunPosition; }
			set
			{
				_SunPosition = value;
				__PlanetConstantBufferDirty = true;
			}
		}

		public Vector3 ImpactPosition
		{
			get { return _ImpactPosition; }
			set
			{
				_ImpactPosition = value;
				__ShieldConstantBufferDirty = true;
			}
		}

		public float TimeToLive
		{
			get { return _TimeToLive; }
			set
			{
				_TimeToLive = value;
				__ShieldConstantBufferDirty = true;
			}
		}

		public CubeMapView SphereTexture { get; set; }

		public EffectTechnique Default { get; private set; }

		public EffectTechnique Planet { get; private set; }

		public EffectTechnique Shield { get; private set; }

		/// <summary>
		///   Binds all textures and non-shared constant buffers required by the effect.
		/// </summary>
		private unsafe void __Bind()
		{
			if (__ConstantBuffer2Dirty)
			{
				var __data = new __ConstantBuffer2();
				__data.World = World;

				__ConstantBuffer2Dirty = false;
				__context.Update(_ConstantBuffer2, &__data);
			}

			if (__PlanetConstantBufferDirty)
			{
				var __data = new __PlanetConstantBuffer();
				__data.SunPosition = SunPosition;

				__PlanetConstantBufferDirty = false;
				__context.Update(_PlanetConstantBuffer, &__data);
			}

			if (__ShieldConstantBufferDirty)
			{
				var __data = new __ShieldConstantBuffer();
				__data.ImpactPosition = ImpactPosition;
				__data.TimeToLive = TimeToLive;

				__ShieldConstantBufferDirty = false;
				__context.Update(_ShieldConstantBuffer, &__data);
			}

			__context.Bind(SphereTexture, 0);
			__context.Bind(_ConstantBuffer2);
			__context.Bind(_PlanetConstantBuffer);
			__context.Bind(_ShieldConstantBuffer);
		}

		/// <summary>
		///   Disposes the object, releasing all managed and unmanaged resources.
		/// </summary>
		protected override void __OnDisposing()
		{
			_ConstantBuffer2.SafeDispose();
			_PlanetConstantBuffer.SafeDispose();
			_ShieldConstantBuffer.SafeDispose();
		}

		[StructLayout(LayoutKind.Explicit, Size = Size)]
		private struct __ConstantBuffer2
		{
			/// <summary>
			///   The size of the struct in bytes.
			/// </summary>
			public const int Size = 64;

			[FieldOffset(0)]
			public Matrix World;
		}

		[StructLayout(LayoutKind.Explicit, Size = Size)]
		private struct __PlanetConstantBuffer
		{
			/// <summary>
			///   The size of the struct in bytes.
			/// </summary>
			public const int Size = 16;

			[FieldOffset(0)]
			public Vector3 SunPosition;
		}

		[StructLayout(LayoutKind.Explicit, Size = Size)]
		private struct __ShieldConstantBuffer
		{
			/// <summary>
			///   The size of the struct in bytes.
			/// </summary>
			public const int Size = 16;

			[FieldOffset(0)]
			public Vector3 ImpactPosition;

			[FieldOffset(12)]
			public float TimeToLive;
		}
	}
}

namespace Lwar.Assets.Effects
{
	public sealed class SpriteEffect : Effect
	{
		/// <summary>
		///   Indicates whether the contents of ConstantBuffer2 have changed.
		/// </summary>
		private bool __ConstantBuffer2Dirty = true;

		/// <summary>
		///   Passes the shader constants in the ConstantBuffer2 constant buffer to the GPU.
		/// </summary>
		private readonly ConstantBuffer _ConstantBuffer2;

		private Matrix _World;

		/// <summary>
		///   Initializes a new instance.
		/// </summary>
		/// <param name="graphicsDevice">The graphics device this instance belongs to.</param>
		/// <param name="assets">The assets manager that should be used to load required assets.</param>
		public unsafe SpriteEffect(GraphicsDevice graphicsDevice, AssetsManager assets)
			: base(graphicsDevice, assets)
		{
			Default = __context.CreateTechnique(__Bind,
				"Effects/SpriteEffect.VertexShader", 
				"Effects/SpriteEffect.FragmentShader");

			_ConstantBuffer2 = __context.CreateConstantBuffer(64, 2);
			_ConstantBuffer2.SetName("used by Lwar.Assets.Effects.SpriteEffect");
		}

		public Matrix World
		{
			get { return _World; }
			set
			{
				_World = value;
				__ConstantBuffer2Dirty = true;
			}
		}

		public Texture2DView Sprite { get; set; }

		public EffectTechnique Default { get; private set; }

		/// <summary>
		///   Binds all textures and non-shared constant buffers required by the effect.
		/// </summary>
		private unsafe void __Bind()
		{
			if (__ConstantBuffer2Dirty)
			{
				var __data = new __ConstantBuffer2();
				__data.World = World;

				__ConstantBuffer2Dirty = false;
				__context.Update(_ConstantBuffer2, &__data);
			}

			__context.Bind(Sprite, 0);
			__context.Bind(_ConstantBuffer2);
		}

		/// <summary>
		///   Disposes the object, releasing all managed and unmanaged resources.
		/// </summary>
		protected override void __OnDisposing()
		{
			_ConstantBuffer2.SafeDispose();
		}

		[StructLayout(LayoutKind.Explicit, Size = Size)]
		private struct __ConstantBuffer2
		{
			/// <summary>
			///   The size of the struct in bytes.
			/// </summary>
			public const int Size = 64;

			[FieldOffset(0)]
			public Matrix World;
		}
	}
}

namespace Lwar.Assets.Effects
{
	public sealed class SunEffect : Effect
	{
		/// <summary>
		///   Indicates whether the contents of ConstantBuffer2 have changed.
		/// </summary>
		private bool __ConstantBuffer2Dirty = true;

		/// <summary>
		///   Passes the shader constants in the ConstantBuffer2 constant buffer to the GPU.
		/// </summary>
		private readonly ConstantBuffer _ConstantBuffer2;

		private Matrix _Rotation1;

		private Matrix _Rotation2;

		private Matrix _World;

		/// <summary>
		///   Initializes a new instance.
		/// </summary>
		/// <param name="graphicsDevice">The graphics device this instance belongs to.</param>
		/// <param name="assets">The assets manager that should be used to load required assets.</param>
		public unsafe SunEffect(GraphicsDevice graphicsDevice, AssetsManager assets)
			: base(graphicsDevice, assets)
		{
			Default = __context.CreateTechnique(__Bind,
				"Effects/SunEffect.VertexShader", 
				"Effects/SunEffect.FragmentShader");

			_ConstantBuffer2 = __context.CreateConstantBuffer(192, 2);
			_ConstantBuffer2.SetName("used by Lwar.Assets.Effects.SunEffect");
		}

		public Matrix Rotation1
		{
			get { return _Rotation1; }
			set
			{
				_Rotation1 = value;
				__ConstantBuffer2Dirty = true;
			}
		}

		public Matrix Rotation2
		{
			get { return _Rotation2; }
			set
			{
				_Rotation2 = value;
				__ConstantBuffer2Dirty = true;
			}
		}

		public Matrix World
		{
			get { return _World; }
			set
			{
				_World = value;
				__ConstantBuffer2Dirty = true;
			}
		}

		public CubeMapView CubeMap { get; set; }
		public Texture2DView HeatMap { get; set; }

		public EffectTechnique Default { get; private set; }

		/// <summary>
		///   Binds all textures and non-shared constant buffers required by the effect.
		/// </summary>
		private unsafe void __Bind()
		{
			if (__ConstantBuffer2Dirty)
			{
				var __data = new __ConstantBuffer2();
				__data.Rotation1 = Rotation1;
				__data.Rotation2 = Rotation2;
				__data.World = World;

				__ConstantBuffer2Dirty = false;
				__context.Update(_ConstantBuffer2, &__data);
			}

			__context.Bind(CubeMap, 0);
			__context.Bind(HeatMap, 1);
			__context.Bind(_ConstantBuffer2);
		}

		/// <summary>
		///   Disposes the object, releasing all managed and unmanaged resources.
		/// </summary>
		protected override void __OnDisposing()
		{
			_ConstantBuffer2.SafeDispose();
		}

		[StructLayout(LayoutKind.Explicit, Size = Size)]
		private struct __ConstantBuffer2
		{
			/// <summary>
			///   The size of the struct in bytes.
			/// </summary>
			public const int Size = 192;

			[FieldOffset(0)]
			public Matrix Rotation1;

			[FieldOffset(64)]
			public Matrix Rotation2;

			[FieldOffset(128)]
			public Matrix World;
		}
	}
}

namespace Lwar.Assets.Effects
{
	public sealed class TexturedQuadEffect : Effect
	{
		/// <summary>
		///   Indicates whether the contents of ConstantBuffer2 have changed.
		/// </summary>
		private bool __ConstantBuffer2Dirty = true;

		/// <summary>
		///   Passes the shader constants in the ConstantBuffer2 constant buffer to the GPU.
		/// </summary>
		private readonly ConstantBuffer _ConstantBuffer2;

		private Matrix _World;

		private Vector4 _Color;

		/// <summary>
		///   Initializes a new instance.
		/// </summary>
		/// <param name="graphicsDevice">The graphics device this instance belongs to.</param>
		/// <param name="assets">The assets manager that should be used to load required assets.</param>
		public unsafe TexturedQuadEffect(GraphicsDevice graphicsDevice, AssetsManager assets)
			: base(graphicsDevice, assets)
		{
			TexturedQuad = __context.CreateTechnique(__Bind,
				"Effects/TexturedQuadEffect.VertexShader", 
				"Effects/TexturedQuadEffect.TexturedQuadFragmentShader");
			ColoredTexturedQuad = __context.CreateTechnique(__Bind,
				"Effects/TexturedQuadEffect.VertexShader", 
				"Effects/TexturedQuadEffect.ColoredTexturedQuadFragmentShader");
			FullScreen = __context.CreateTechnique(__Bind,
				"Effects/TexturedQuadEffect.FullScreenVertexShader", 
				"Effects/TexturedQuadEffect.TexturedQuadFragmentShader");

			_ConstantBuffer2 = __context.CreateConstantBuffer(80, 2);
			_ConstantBuffer2.SetName("used by Lwar.Assets.Effects.TexturedQuadEffect");
		}

		public Matrix World
		{
			get { return _World; }
			set
			{
				_World = value;
				__ConstantBuffer2Dirty = true;
			}
		}

		public Vector4 Color
		{
			get { return _Color; }
			set
			{
				_Color = value;
				__ConstantBuffer2Dirty = true;
			}
		}

		public Texture2DView Texture { get; set; }

		public EffectTechnique TexturedQuad { get; private set; }

		public EffectTechnique ColoredTexturedQuad { get; private set; }

		public EffectTechnique FullScreen { get; private set; }

		/// <summary>
		///   Binds all textures and non-shared constant buffers required by the effect.
		/// </summary>
		private unsafe void __Bind()
		{
			if (__ConstantBuffer2Dirty)
			{
				var __data = new __ConstantBuffer2();
				__data.World = World;
				__data.Color = Color;

				__ConstantBuffer2Dirty = false;
				__context.Update(_ConstantBuffer2, &__data);
			}

			__context.Bind(Texture, 0);
			__context.Bind(_ConstantBuffer2);
		}

		/// <summary>
		///   Disposes the object, releasing all managed and unmanaged resources.
		/// </summary>
		protected override void __OnDisposing()
		{
			_ConstantBuffer2.SafeDispose();
		}

		[StructLayout(LayoutKind.Explicit, Size = Size)]
		private struct __ConstantBuffer2
		{
			/// <summary>
			///   The size of the struct in bytes.
			/// </summary>
			public const int Size = 80;

			[FieldOffset(0)]
			public Matrix World;

			[FieldOffset(64)]
			public Vector4 Color;
		}
	}
}

