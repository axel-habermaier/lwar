//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by the Pegasus Asset Compiler.
//     Thursday, April 4, 2013, 16:48:21
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace Lwar.Client.Scripting
{
	using Pegasus.Framework.Scripting;
	using System.Net;

	public class CommandRegistry : Pegasus.Framework.Scripting.CommandRegistry
	{
		/// <summary>
		///   Starts up a new server instance.
		/// </summary>
		private readonly Command _startServer = new Command("start_server", "Starts up a new server instance.");

		/// <summary>
		///   Shuts down the currently running server.
		/// </summary>
		private readonly Command _stopServer = new Command("stop_server", "Shuts down the currently running server.");

		/// <summary>
		///   Connects to a game session on a server.
		/// </summary>
		private readonly Command<IPEndPoint> _connect = new Command<IPEndPoint>("connect", "Connects to a game session on a server.");

		/// <summary>
		///   Disconnects from the current game session.
		/// </summary>
		private readonly Command _disconnect = new Command("disconnect", "Disconnects from the current game session.");

		/// <summary>
		///   Sends a chat message to all peers.
		/// </summary>
		private readonly Command<string> _chat = new Command<string>("chat", "Sends a chat message to all peers.");

		/// <summary>
		///   Toggles between the game and the debugging camera.
		/// </summary>
		private readonly Command _toggleDebugCamera = new Command("toggle_debug_camera", "Toggles between the game and the debugging camera.");

		/// <summary>
		///   Initializes a new instance.
		/// </summary>
		public CommandRegistry()
		{
			Register(_startServer, "start_server");
			Register(_stopServer, "stop_server");
			Register(_connect, "connect");
			Register(_disconnect, "disconnect");
			Register(_chat, "chat");
			Register(_toggleDebugCamera, "toggle_debug_camera");
		}

		/// <summary>
		///   Starts up a new server instance.
		/// </summary>
		public void StartServer()
		{
			_startServer.Invoke();
		}

		/// <summary>
		///   Shuts down the currently running server.
		/// </summary>
		public void StopServer()
		{
			_stopServer.Invoke();
		}

		/// <summary>
		///   Connects to a game session on a server.
		/// </summary>
		public void Connect(IPEndPoint endPoint)
		{
			_connect.Invoke(endPoint);
		}

		/// <summary>
		///   Disconnects from the current game session.
		/// </summary>
		public void Disconnect()
		{
			_disconnect.Invoke();
		}

		/// <summary>
		///   Sends a chat message to all peers.
		/// </summary>
		public void Chat(string message)
		{
			_chat.Invoke(message);
		}

		/// <summary>
		///   Toggles between the game and the debugging camera.
		/// </summary>
		public void ToggleDebugCamera()
		{
			_toggleDebugCamera.Invoke();
		}

		/// <summary>
		///   Raised when the StartServer command is invoked.
		/// </summary>
		public event Action OnStartServer
		{
			add { _startServer.Invoked += value; }
			remove { _startServer.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the StopServer command is invoked.
		/// </summary>
		public event Action OnStopServer
		{
			add { _stopServer.Invoked += value; }
			remove { _stopServer.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the Connect command is invoked.
		/// </summary>
		public event Action<IPEndPoint> OnConnect
		{
			add { _connect.Invoked += value; }
			remove { _connect.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the Disconnect command is invoked.
		/// </summary>
		public event Action OnDisconnect
		{
			add { _disconnect.Invoked += value; }
			remove { _disconnect.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the Chat command is invoked.
		/// </summary>
		public event Action<string> OnChat
		{
			add { _chat.Invoked += value; }
			remove { _chat.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the ToggleDebugCamera command is invoked.
		/// </summary>
		public event Action OnToggleDebugCamera
		{
			add { _toggleDebugCamera.Invoked += value; }
			remove { _toggleDebugCamera.Invoked -= value; }
		}
	}
}

