//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by the Pegasus Asset Compiler.
//     Monday, June 3, 2013, 18:41:22
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;

namespace Lwar.Client.Scripting
{
	using Lwar.Client.Network;
	using Pegasus.Framework;
	using Pegasus.Framework.Platform.Input;
	using Pegasus.Framework.Platform.Logging;
	using Pegasus.Framework.Scripting;
	using System.Net;

	internal static class Commands
	{
		/// <summary>
		///   Starts up a new local server instance. If a local server is currently running, it is shut down before the new server is started.
		/// </summary>
		private static Command _startServer;

		/// <summary>
		///   Shuts down the currently running server.
		/// </summary>
		private static Command _stopServer;

		/// <summary>
		///   Connects to a game session on a remote or local server.
		/// </summary>
		private static Command<IPAddress, ushort> _connect;

		/// <summary>
		///   Disconnects from the current game session.
		/// </summary>
		private static Command _disconnect;

		/// <summary>
		///   Sends a chat message to all peers.
		/// </summary>
		private static Command<string> _say;

		/// <summary>
		///   Toggles between the game and the debugging camera.
		/// </summary>
		private static Command _toggleDebugCamera;

		/// <summary>
		///   Shows or hides the scoreboard during an active game session.
		/// </summary>
		private static Command<bool> _showScoreboard;

		/// <summary>
		///   Immediately exits the application.
		/// </summary>
		private static Command _exit;

		/// <summary>
		///   Describes the usage and the purpose of the the cvar or command with the given name. If no name is given, displays a help text about the usage of cvars and commands in general.
		/// </summary>
		private static Command<string> _help;

		/// <summary>
		///   Lists all cvars with names that match the search pattern.
		/// </summary>
		private static Command<string> _listCvars;

		/// <summary>
		///   Lists all commands with names that match the search pattern.
		/// </summary>
		private static Command<string> _listCommands;

		/// <summary>
		///   Executes the given command.
		/// </summary>
		private static Command<string> _execute;

		/// <summary>
		///   Processes the commands in the given file.
		/// </summary>
		private static Command<string> _process;

		/// <summary>
		///   Saves the persistent cvars into the given file.
		/// </summary>
		private static Command<string> _persist;

		/// <summary>
		///   Binds a command invocation to a logical input. Whenever the input is triggered, the command is invoked with the specified arguments.
		/// </summary>
		private static Command<InputTrigger, string> _bind;

		/// <summary>
		///   Shows or hides the console.
		/// </summary>
		private static Command<bool> _showConsole;

		/// <summary>
		///   Toggles the visiblity of the statistics.
		/// </summary>
		private static Command _toggleStats;

		/// <summary>
		///   Reloads all changed assets.
		/// </summary>
		private static Command _reloadAssets;

		/// <summary>
		///   Restarts the graphics subsystem after a resolution or video mode change.
		/// </summary>
		private static Command _restartGraphics;

		/// <summary>
		///   Starts up a new local server instance. If a local server is currently running, it is shut down before the new server
		///   is started.
		/// </summary>
		[DebuggerHidden]
		public static void StartServer()
		{
			_startServer.Invoke();
		}

		/// <summary>
		///   Shuts down the currently running server.
		/// </summary>
		[DebuggerHidden]
		public static void StopServer()
		{
			_stopServer.Invoke();
		}

		/// <summary>
		///   Connects to a game session on a remote or local server.
		/// </summary>
		/// <param name="ipAddress">
		///   The IP address of the server in either IPv4 or IPv6 format. For instance, either 127.0.0.1 or ::1 can be used to
		///   connect to a local server.
		/// </param>
		/// <param name="port">The port of the server.</param>
		[DebuggerHidden]
		public static void Connect(IPAddress ipAddress, ushort port = Specification.DefaultServerPort)
		{
			Assert.ArgumentNotNull((object)ipAddress);
			Assert.ArgumentNotNull((object)port);
			_connect.Invoke(ipAddress, port);
		}

		/// <summary>
		///   Disconnects from the current game session.
		/// </summary>
		[DebuggerHidden]
		public static void Disconnect()
		{
			_disconnect.Invoke();
		}

		/// <summary>
		///   Sends a chat message to all peers.
		/// </summary>
		/// <param name="message">The message that should be sent.</param>
		[DebuggerHidden]
		public static void Say(string message)
		{
			Assert.ArgumentNotNull((object)message);
			_say.Invoke(message);
		}

		/// <summary>
		///   Toggles between the game and the debugging camera.
		/// </summary>
		[DebuggerHidden]
		public static void ToggleDebugCamera()
		{
			_toggleDebugCamera.Invoke();
		}

		/// <summary>
		///   Shows or hides the scoreboard during an active game session.
		/// </summary>
		/// <param name="show">A value of 'true' indicates that the scoreboard should be shown.</param>
		[DebuggerHidden]
		public static void ShowScoreboard(bool show)
		{
			Assert.ArgumentNotNull((object)show);
			_showScoreboard.Invoke(show);
		}

		/// <summary>
		///   Immediately exits the application.
		/// </summary>
		[DebuggerHidden]
		public static void Exit()
		{
			_exit.Invoke();
		}

		/// <summary>
		///   Describes the usage and the purpose of the the cvar or command with the given name. If no name is given, displays a
		///   help text about the usage of cvars and commands in general.
		/// </summary>
		/// <param name="name">The name of the cvar or the command for which the description should be displayed.</param>
		[DebuggerHidden]
		public static void Help(string name = "")
		{
			Assert.ArgumentNotNull((object)name);
			_help.Invoke(name);
		}

		/// <summary>
		///   Lists all cvars with names that match the search pattern.
		/// </summary>
		/// <param name="pattern">
		///   The search pattern of the cvars that should be listed. For instance, 'draw' lists all cvars that have the string
		///   'draw' in their name. The pattern is case-insensitive; use '*' to list all cvars.
		/// </param>
		[DebuggerHidden]
		public static void ListCvars(string pattern = "*")
		{
			Assert.ArgumentNotNull((object)pattern);
			_listCvars.Invoke(pattern);
		}

		/// <summary>
		///   Lists all commands with names that match the search pattern.
		/// </summary>
		/// <param name="pattern">
		///   The search pattern of the commands that should be listed. For instance, 'draw' lists all commands that have the
		///   string 'draw' in their name. The pattern is case-insensitive; use '*' to list all commands.
		/// </param>
		[DebuggerHidden]
		public static void ListCommands(string pattern = "*")
		{
			Assert.ArgumentNotNull((object)pattern);
			_listCommands.Invoke(pattern);
		}

		/// <summary>
		///   Executes the given command.
		/// </summary>
		/// <param name="command">The command that should be executed, including its arguments.</param>
		[DebuggerHidden]
		public static void Execute(string command)
		{
			Assert.ArgumentNotNull((object)command);
			_execute.Invoke(command);
		}

		/// <summary>
		///   Processes the commands in the given file.
		/// </summary>
		/// <param name="fileName">The name of the file in the application's user directory that should be processed.</param>
		[DebuggerHidden]
		public static void Process(string fileName)
		{
			Assert.ArgumentNotNull((object)fileName);
			_process.Invoke(fileName);
		}

		/// <summary>
		///   Saves the persistent cvars into the given file.
		/// </summary>
		/// <param name="fileName">The name of the file in the application's user directory the cvars should be written to.</param>
		[DebuggerHidden]
		public static void Persist(string fileName)
		{
			Assert.ArgumentNotNull((object)fileName);
			_persist.Invoke(fileName);
		}

		/// <summary>
		///   Binds a command invocation to a logical input. Whenever the input is triggered, the command is invoked with the
		///   specified arguments.
		/// </summary>
		/// <param name="trigger">The trigger that triggers the command.</param>
		/// <param name="command">The command (including the arguments) that should be executed when the trigger is fired.</param>
		[DebuggerHidden]
		public static void Bind(InputTrigger trigger, string command)
		{
			Assert.ArgumentNotNull((object)trigger);
			Assert.ArgumentNotNull((object)command);
			_bind.Invoke(trigger, command);
		}

		/// <summary>
		///   Shows or hides the console.
		/// </summary>
		/// <param name="show">A value of 'true' indicates that the console should be shown.</param>
		[DebuggerHidden]
		public static void ShowConsole(bool show)
		{
			Assert.ArgumentNotNull((object)show);
			_showConsole.Invoke(show);
		}

		/// <summary>
		///   Toggles the visiblity of the statistics.
		/// </summary>
		[DebuggerHidden]
		public static void ToggleStats()
		{
			_toggleStats.Invoke();
		}

		/// <summary>
		///   Reloads all changed assets.
		/// </summary>
		[DebuggerHidden]
		public static void ReloadAssets()
		{
			_reloadAssets.Invoke();
		}

		/// <summary>
		///   Restarts the graphics subsystem after a resolution or video mode change.
		/// </summary>
		[DebuggerHidden]
		public static void RestartGraphics()
		{
			_restartGraphics.Invoke();
		}

		/// <summary>
		///   Raised when the 'StartServer' command is invoked.
		/// </summary>
		public static event Action OnStartServer
		{
			add { _startServer.Invoked += value; }
			remove { _startServer.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'StopServer' command is invoked.
		/// </summary>
		public static event Action OnStopServer
		{
			add { _stopServer.Invoked += value; }
			remove { _stopServer.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'Connect' command is invoked.
		/// </summary>
		public static event Action<IPAddress, ushort> OnConnect
		{
			add { _connect.Invoked += value; }
			remove { _connect.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'Disconnect' command is invoked.
		/// </summary>
		public static event Action OnDisconnect
		{
			add { _disconnect.Invoked += value; }
			remove { _disconnect.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'Say' command is invoked.
		/// </summary>
		public static event Action<string> OnSay
		{
			add { _say.Invoked += value; }
			remove { _say.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'ToggleDebugCamera' command is invoked.
		/// </summary>
		public static event Action OnToggleDebugCamera
		{
			add { _toggleDebugCamera.Invoked += value; }
			remove { _toggleDebugCamera.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'ShowScoreboard' command is invoked.
		/// </summary>
		public static event Action<bool> OnShowScoreboard
		{
			add { _showScoreboard.Invoked += value; }
			remove { _showScoreboard.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'Exit' command is invoked.
		/// </summary>
		public static event Action OnExit
		{
			add { _exit.Invoked += value; }
			remove { _exit.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'Help' command is invoked.
		/// </summary>
		public static event Action<string> OnHelp
		{
			add { _help.Invoked += value; }
			remove { _help.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'ListCvars' command is invoked.
		/// </summary>
		public static event Action<string> OnListCvars
		{
			add { _listCvars.Invoked += value; }
			remove { _listCvars.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'ListCommands' command is invoked.
		/// </summary>
		public static event Action<string> OnListCommands
		{
			add { _listCommands.Invoked += value; }
			remove { _listCommands.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'Execute' command is invoked.
		/// </summary>
		public static event Action<string> OnExecute
		{
			add { _execute.Invoked += value; }
			remove { _execute.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'Process' command is invoked.
		/// </summary>
		public static event Action<string> OnProcess
		{
			add { _process.Invoked += value; }
			remove { _process.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'Persist' command is invoked.
		/// </summary>
		public static event Action<string> OnPersist
		{
			add { _persist.Invoked += value; }
			remove { _persist.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'Bind' command is invoked.
		/// </summary>
		public static event Action<InputTrigger, string> OnBind
		{
			add { _bind.Invoked += value; }
			remove { _bind.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'ShowConsole' command is invoked.
		/// </summary>
		public static event Action<bool> OnShowConsole
		{
			add { _showConsole.Invoked += value; }
			remove { _showConsole.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'ToggleStats' command is invoked.
		/// </summary>
		public static event Action OnToggleStats
		{
			add { _toggleStats.Invoked += value; }
			remove { _toggleStats.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'ReloadAssets' command is invoked.
		/// </summary>
		public static event Action OnReloadAssets
		{
			add { _reloadAssets.Invoked += value; }
			remove { _reloadAssets.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the 'RestartGraphics' command is invoked.
		/// </summary>
		public static event Action OnRestartGraphics
		{
			add { _restartGraphics.Invoked += value; }
			remove { _restartGraphics.Invoked -= value; }
		}

		/// <summary>
		///   Initializes the instances declared by the registry.
		/// </summary>
		public static void Initialize()
		{
			_startServer = new Command("start_server", "Starts up a new local server instance. If a local server is currently running, it is shut down before the new server is started.");
			_stopServer = new Command("stop_server", "Shuts down the currently running server.");
			_connect = new Command<IPAddress, ushort>("connect", "Connects to a game session on a remote or local server.", 
				new CommandParameter("ipAddress", typeof(IPAddress), false, default(IPAddress), "The IP address of the server in either IPv4 or IPv6 format. For instance, either 127.0.0.1 or ::1 can be used to connect to a local server."),
				new CommandParameter("port", typeof(ushort), true, Specification.DefaultServerPort, "The port of the server."));
			_disconnect = new Command("disconnect", "Disconnects from the current game session.");
			_say = new Command<string>("say", "Sends a chat message to all peers.", 
				new CommandParameter("message", typeof(string), false, default(string), "The message that should be sent.", new NotEmptyAttribute(), new MaximumLengthAttribute(Specification.MaximumChatMessageLength, true)));
			_toggleDebugCamera = new Command("toggle_debug_camera", "Toggles between the game and the debugging camera.");
			_showScoreboard = new Command<bool>("show_scoreboard", "Shows or hides the scoreboard during an active game session.", 
				new CommandParameter("show", typeof(bool), false, default(bool), "A value of 'true' indicates that the scoreboard should be shown."));

			CommandRegistry.Register(_startServer);
			CommandRegistry.Register(_stopServer);
			CommandRegistry.Register(_connect);
			CommandRegistry.Register(_disconnect);
			CommandRegistry.Register(_say);
			CommandRegistry.Register(_toggleDebugCamera);
			CommandRegistry.Register(_showScoreboard);

		}

		/// <summary>
		///   Initializes the instances imported by the registry.
		/// </summary>
		public static void Resolve()
		{
			_exit = CommandRegistry.Resolve("exit");
			_help = CommandRegistry.Resolve<string>("help");
			_listCvars = CommandRegistry.Resolve<string>("list_cvars");
			_listCommands = CommandRegistry.Resolve<string>("list_commands");
			_execute = CommandRegistry.Resolve<string>("execute");
			_process = CommandRegistry.Resolve<string>("process");
			_persist = CommandRegistry.Resolve<string>("persist");
			_bind = CommandRegistry.Resolve<InputTrigger, string>("bind");
			_showConsole = CommandRegistry.Resolve<bool>("show_console");
			_toggleStats = CommandRegistry.Resolve("toggle_stats");
			_reloadAssets = CommandRegistry.Resolve("reload_assets");
			_restartGraphics = CommandRegistry.Resolve("restart_graphics");
		}
	}
}

