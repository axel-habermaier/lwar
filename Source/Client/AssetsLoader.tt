<#@ include file="../Framework/Platform/CodeModel.t4" #><# #>
using System;

namespace Lwar.Client
{
	using Pegasus.Framework.Platform.Assets;

	/// <summary>
	///   Loads assets into static asset fields.
	/// </summary>
	public static class AssetsLoader
	{
		/// <summary>
		///   Loads all assets.
		/// </summary>
		/// <param name="assets">The assets manager that should be used to load the assets.</param>
		public static void Load(AssetsManager assets)
		{
<# foreach (var assetField in GetAssetFields()) { #>
			<#= assetField.Type #>.<#= assetField.FieldName #> = assets.<#= assetField.LoadFunction() #>(<#= assetField.AssetName #>);
<# } #>
		}
	}
}

<#+

	struct AssetField
	{
		public string Type;
		public string FieldName;
		public string AssetType;
		public string AssetName;

		public string LoadFunction()
		{
			if (AssetType.EndsWith("Texture2D"))
				return "LoadTexture2D";

			if (AssetType.EndsWith("Font"))
				return "LoadFont";

			if (AssetType.EndsWith("FragmentShader"))
				return "LoadFragmentShader";

			if (AssetType.EndsWith("VertexShader"))
				return "LoadVertexShader";

			if (AssetType.EndsWith("CubeMap"))
				return "LoadCubeMap";

			throw new InvalidOperationException("Unknown asset type: " + AssetType);
		}
	}

	IEnumerable<AssetField> GetAssetFields()
	{
		var classes = GetNamespaceElements<CodeClass>().Cast<CodeElement>();
		var structs = GetNamespaceElements<CodeStruct>().Cast<CodeElement>();

		foreach (var codeElement in classes.Union(structs))
			foreach (var assetField in GetAssetFields(codeElement))
				yield return assetField;
	}

	IEnumerable<AssetField> GetAssetFields(CodeElement codeElement)
	{
		foreach (var codeField in codeElement.Children.OfType<CodeVariable>())
		{
			var assetName = GetAttributeValue(codeField.Attributes, "Asset");
			if (assetName == null)
				continue;

			var type = codeElement.Kind == vsCMElement.vsCMElementClass ?
				((CodeClass)codeElement).FullName :
				((CodeStruct)codeElement).FullName;

			yield return new AssetField 
			{ 
				Type = type,
				FieldName = codeField.Name,
				AssetType = codeField.Type.AsFullName,
				AssetName = assetName
			};
		}
	}

#>