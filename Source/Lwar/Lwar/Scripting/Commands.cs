//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by the Pegasus Asset Compiler.
//     Monday, 18 August 2014, 13:05:48
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;

namespace Lwar.Scripting
{
	using Lwar.Network;
	using Pegasus;
	using Pegasus.Framework.UserInterface.Input;
	using Pegasus.Platform.Logging;
	using Pegasus.Platform.Network;
	using Pegasus.Scripting;
	using Pegasus.Scripting.Validators;

	internal static class Commands
	{
		/// <summary>
		///     
		/// </summary>
		public static Command StartServerCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command StopServerCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<IPAddress, ushort> ConnectCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command DisconnectCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<string> SayCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command ToggleDebugCameraCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command ExitCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<string> HelpCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<string> ResetCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<string> ListCvarsCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<string> ListCommandsCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<string> ExecuteCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<string> ProcessCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<string> PersistCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command PrintAppInfoCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<InputTrigger, string> BindCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<InputTrigger> UnbindCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command UnbindAllCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command ListBindingsCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<bool> ShowConsoleCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command ReloadAssetsCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command RestartGraphicsCommand { get; private set; }

		/// <summary>
		///     
		/// </summary>
		public static Command<string> ToggleCommand { get; private set; }

		[DebuggerHidden]
		public static void StartServer()
		{
			StartServerCommand.Invoke();
		}

		[DebuggerHidden]
		public static void StopServer()
		{
			StopServerCommand.Invoke();
		}

		[DebuggerHidden]
		public static void Connect(IPAddress ipAddress, ushort port = Specification.DefaultServerPort)
		{
			Assert.ArgumentNotNull((object)ipAddress);
			Assert.ArgumentNotNull((object)port);
			ConnectCommand.Invoke(ipAddress, port);
		}

		[DebuggerHidden]
		public static void Disconnect()
		{
			DisconnectCommand.Invoke();
		}

		[DebuggerHidden]
		public static void Say(string message)
		{
			Assert.ArgumentNotNull((object)message);
			SayCommand.Invoke(message);
		}

		[DebuggerHidden]
		public static void ToggleDebugCamera()
		{
			ToggleDebugCameraCommand.Invoke();
		}

		[DebuggerHidden]
		public static void Exit()
		{
			ExitCommand.Invoke();
		}

		[DebuggerHidden]
		public static void Help(string name = "")
		{
			Assert.ArgumentNotNull((object)name);
			HelpCommand.Invoke(name);
		}

		[DebuggerHidden]
		public static void Reset(string cvar)
		{
			Assert.ArgumentNotNull((object)cvar);
			ResetCommand.Invoke(cvar);
		}

		[DebuggerHidden]
		public static void ListCvars(string pattern = "*")
		{
			Assert.ArgumentNotNull((object)pattern);
			ListCvarsCommand.Invoke(pattern);
		}

		[DebuggerHidden]
		public static void ListCommands(string pattern = "*")
		{
			Assert.ArgumentNotNull((object)pattern);
			ListCommandsCommand.Invoke(pattern);
		}

		[DebuggerHidden]
		public static void Execute(string command)
		{
			Assert.ArgumentNotNull((object)command);
			ExecuteCommand.Invoke(command);
		}

		[DebuggerHidden]
		public static void Process(string fileName)
		{
			Assert.ArgumentNotNull((object)fileName);
			ProcessCommand.Invoke(fileName);
		}

		[DebuggerHidden]
		public static void Persist(string fileName)
		{
			Assert.ArgumentNotNull((object)fileName);
			PersistCommand.Invoke(fileName);
		}

		[DebuggerHidden]
		public static void PrintAppInfo()
		{
			PrintAppInfoCommand.Invoke();
		}

		[DebuggerHidden]
		public static void Bind(InputTrigger trigger, string command)
		{
			Assert.ArgumentNotNull((object)trigger);
			Assert.ArgumentNotNull((object)command);
			BindCommand.Invoke(trigger, command);
		}

		[DebuggerHidden]
		public static void Unbind(InputTrigger trigger)
		{
			Assert.ArgumentNotNull((object)trigger);
			UnbindCommand.Invoke(trigger);
		}

		[DebuggerHidden]
		public static void UnbindAll()
		{
			UnbindAllCommand.Invoke();
		}

		[DebuggerHidden]
		public static void ListBindings()
		{
			ListBindingsCommand.Invoke();
		}

		[DebuggerHidden]
		public static void ShowConsole(bool show)
		{
			Assert.ArgumentNotNull((object)show);
			ShowConsoleCommand.Invoke(show);
		}

		[DebuggerHidden]
		public static void ReloadAssets()
		{
			ReloadAssetsCommand.Invoke();
		}

		[DebuggerHidden]
		public static void RestartGraphics()
		{
			RestartGraphicsCommand.Invoke();
		}

		[DebuggerHidden]
		public static void Toggle(string cvar)
		{
			Assert.ArgumentNotNull((object)cvar);
			ToggleCommand.Invoke(cvar);
		}

		/// <summary>
		///     Raised when the 'StartServer' command is invoked.
		/// </summary>
		public static event Action OnStartServer
		{
			add { StartServerCommand.Invoked += value; }
			remove { StartServerCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'StopServer' command is invoked.
		/// </summary>
		public static event Action OnStopServer
		{
			add { StopServerCommand.Invoked += value; }
			remove { StopServerCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Connect' command is invoked.
		/// </summary>
		public static event Action<IPAddress, ushort> OnConnect
		{
			add { ConnectCommand.Invoked += value; }
			remove { ConnectCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Disconnect' command is invoked.
		/// </summary>
		public static event Action OnDisconnect
		{
			add { DisconnectCommand.Invoked += value; }
			remove { DisconnectCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Say' command is invoked.
		/// </summary>
		public static event Action<string> OnSay
		{
			add { SayCommand.Invoked += value; }
			remove { SayCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'ToggleDebugCamera' command is invoked.
		/// </summary>
		public static event Action OnToggleDebugCamera
		{
			add { ToggleDebugCameraCommand.Invoked += value; }
			remove { ToggleDebugCameraCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Exit' command is invoked.
		/// </summary>
		public static event Action OnExit
		{
			add { ExitCommand.Invoked += value; }
			remove { ExitCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Help' command is invoked.
		/// </summary>
		public static event Action<string> OnHelp
		{
			add { HelpCommand.Invoked += value; }
			remove { HelpCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Reset' command is invoked.
		/// </summary>
		public static event Action<string> OnReset
		{
			add { ResetCommand.Invoked += value; }
			remove { ResetCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'ListCvars' command is invoked.
		/// </summary>
		public static event Action<string> OnListCvars
		{
			add { ListCvarsCommand.Invoked += value; }
			remove { ListCvarsCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'ListCommands' command is invoked.
		/// </summary>
		public static event Action<string> OnListCommands
		{
			add { ListCommandsCommand.Invoked += value; }
			remove { ListCommandsCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Execute' command is invoked.
		/// </summary>
		public static event Action<string> OnExecute
		{
			add { ExecuteCommand.Invoked += value; }
			remove { ExecuteCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Process' command is invoked.
		/// </summary>
		public static event Action<string> OnProcess
		{
			add { ProcessCommand.Invoked += value; }
			remove { ProcessCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Persist' command is invoked.
		/// </summary>
		public static event Action<string> OnPersist
		{
			add { PersistCommand.Invoked += value; }
			remove { PersistCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'PrintAppInfo' command is invoked.
		/// </summary>
		public static event Action OnPrintAppInfo
		{
			add { PrintAppInfoCommand.Invoked += value; }
			remove { PrintAppInfoCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Bind' command is invoked.
		/// </summary>
		public static event Action<InputTrigger, string> OnBind
		{
			add { BindCommand.Invoked += value; }
			remove { BindCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Unbind' command is invoked.
		/// </summary>
		public static event Action<InputTrigger> OnUnbind
		{
			add { UnbindCommand.Invoked += value; }
			remove { UnbindCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'UnbindAll' command is invoked.
		/// </summary>
		public static event Action OnUnbindAll
		{
			add { UnbindAllCommand.Invoked += value; }
			remove { UnbindAllCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'ListBindings' command is invoked.
		/// </summary>
		public static event Action OnListBindings
		{
			add { ListBindingsCommand.Invoked += value; }
			remove { ListBindingsCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'ShowConsole' command is invoked.
		/// </summary>
		public static event Action<bool> OnShowConsole
		{
			add { ShowConsoleCommand.Invoked += value; }
			remove { ShowConsoleCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'ReloadAssets' command is invoked.
		/// </summary>
		public static event Action OnReloadAssets
		{
			add { ReloadAssetsCommand.Invoked += value; }
			remove { ReloadAssetsCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'RestartGraphics' command is invoked.
		/// </summary>
		public static event Action OnRestartGraphics
		{
			add { RestartGraphicsCommand.Invoked += value; }
			remove { RestartGraphicsCommand.Invoked -= value; }
		}

		/// <summary>
		///     Raised when the 'Toggle' command is invoked.
		/// </summary>
		public static event Action<string> OnToggle
		{
			add { ToggleCommand.Invoked += value; }
			remove { ToggleCommand.Invoked -= value; }
		}

		/// <summary>
		///     Initializes the instances declared by the registry.
		/// </summary>
		public static void Initialize()
		{
			StartServerCommand = new Command("start_server", "", false);
			StopServerCommand = new Command("stop_server", "", false);
			ConnectCommand = new Command<IPAddress, ushort>("connect", "", false, 
				new CommandParameter("ipAddress", typeof(IPAddress), false, default(IPAddress), ""),
				new CommandParameter("port", typeof(ushort), true, Specification.DefaultServerPort, ""));
			DisconnectCommand = new Command("disconnect", "", false);
			SayCommand = new Command<string>("say", "", false, 
				new CommandParameter("message", typeof(string), false, default(string), "", new NotEmptyAttribute(), new MaximumLengthAttribute(Specification.ChatMessageLength, true)));
			ToggleDebugCameraCommand = new Command("toggle_debug_camera", "", false);

			CommandRegistry.Register(StartServerCommand);
			CommandRegistry.Register(StopServerCommand);
			CommandRegistry.Register(ConnectCommand);
			CommandRegistry.Register(DisconnectCommand);
			CommandRegistry.Register(SayCommand);
			CommandRegistry.Register(ToggleDebugCameraCommand);
		}

		/// <summary>
		///     Initializes the instances imported by the registry.
		/// </summary>
		public static void Resolve()
		{
			ExitCommand = CommandRegistry.Resolve("exit");
			HelpCommand = CommandRegistry.Resolve<string>("help");
			ResetCommand = CommandRegistry.Resolve<string>("reset");
			ListCvarsCommand = CommandRegistry.Resolve<string>("list_cvars");
			ListCommandsCommand = CommandRegistry.Resolve<string>("list_commands");
			ExecuteCommand = CommandRegistry.Resolve<string>("execute");
			ProcessCommand = CommandRegistry.Resolve<string>("process");
			PersistCommand = CommandRegistry.Resolve<string>("persist");
			PrintAppInfoCommand = CommandRegistry.Resolve("print_app_info");
			BindCommand = CommandRegistry.Resolve<InputTrigger, string>("bind");
			UnbindCommand = CommandRegistry.Resolve<InputTrigger>("unbind");
			UnbindAllCommand = CommandRegistry.Resolve("unbind_all");
			ListBindingsCommand = CommandRegistry.Resolve("list_bindings");
			ShowConsoleCommand = CommandRegistry.Resolve<bool>("show_console");
			ReloadAssetsCommand = CommandRegistry.Resolve("reload_assets");
			RestartGraphicsCommand = CommandRegistry.Resolve("restart_graphics");
			ToggleCommand = CommandRegistry.Resolve<string>("toggle");
		}
	}
}

