//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by the Pegasus Asset Compiler.
//     Wednesday, 15 January 2014, 18:34:27
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lwar.Assets
{
	using System;
	using Pegasus;
	using Pegasus.Framework.UserInterface;
	using Pegasus.Platform.Assets;
	using Pegasus.Platform.Logging;
	using Pegasus.Rendering.UserInterface;

	/// <summary>
	///     Provides a method to search for a font based on certain font settings.
	/// </summary>
	internal class FontLoader : IFontLoader
	{
		/// <summary>
		///     The assets manager that is used to load the fonts.
		/// </summary>
		private AssetsManager _assets;

		/// <summary>
		///     Initializes a new instance.
		/// </summary>
		/// <param name="assets">The assets manager that should be used to load the fonts.</param>
		public FontLoader(AssetsManager assets)
		{
			Assert.ArgumentNotNull(assets);
			_assets = assets;
		}

		/// <summary>
		///     Sets the next font loader that is used to load the font if the current loader fails to
		///     load an appropriate font.
		/// </summary>
		public IFontLoader Next { private get; set; }

		/// <summary>
		///     Gets the font matching the given font settings.
		/// </summary>
		/// <param name="fontFamily">The family of the font that should be returned.</param>
		/// <param name="size">The size of the font that should be returned.</param>
		/// <param name="bold">Indicates whether the font should be bold.</param>
		/// <param name="italic">Indicates whether the font should be italic.</param>
		/// <param name="aliased">Indicates whether the font should be aliased.</param>
		public Font LoadFont(string fontFamily, int size, bool bold, bool italic, bool aliased)
		{
			Assert.ArgumentNotNullOrWhitespace(fontFamily);

			string font = null;
			switch (fontFamily)
			{
				case "Liberation Mono":
					switch (size)
					{
						case 11:
							if (bold == false && italic == false && aliased == true)
								font = "Fonts/Liberation Mono 11.1";
							break;
					}
					break;
			}

			if (font == null && Next != null)
				return Next.LoadFont(fontFamily, size, bold, italic, aliased);
			else if (font == null)
				Log.Die("Unable to find a font with family = '{0}', size = {1}, bold = {2}, italic = {3}, aliased = {4}.", fontFamily, size, bold, italic, aliased);

			return _assets.LoadFont(font);
		}
	}
}
