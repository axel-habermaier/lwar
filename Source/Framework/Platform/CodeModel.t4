<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ Import Namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#+

	protected Project Project
	{
		get
		{
			IServiceProvider hostServiceProvider = (IServiceProvider)Host;
			EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
			EnvDTE.ProjectItem containingProjectItem = dte.Solution.FindProjectItem(Host.TemplateFile);
			return containingProjectItem.ContainingProject;
		}
	}

	protected string GetAttributeValue(CodeElements attributes, string attributeName)
	{
		var attribute = attributes.Cast<CodeAttribute2>().Where(a => a.Name == attributeName).SingleOrDefault();
		if (attribute == null)
			return null;

		return attribute.Value;
	}

	protected IEnumerable<T> GetNamespaceElements<T>()
	{
		foreach (ProjectItem projectItem in Project.ProjectItems)
			foreach (var element in GetNamespaceElements<T>(projectItem))
				yield return element;
	}

	private IEnumerable<T> GetNamespaceElements<T>(ProjectItem projectItem)
	{
		var fileCodeModel = projectItem.FileCodeModel;
	
		if (fileCodeModel != null)
		{
			foreach (var codeNamespace in fileCodeModel.CodeElements.OfType<CodeNamespace>())
			{
				foreach (var element in codeNamespace.Children.OfType<T>())
					yield return element;
			}
		}

		if (projectItem.ProjectItems == null)
			yield break;

		foreach (ProjectItem childItem in projectItem.ProjectItems)
		{
			foreach (var item in GetNamespaceElements<T>(childItem))
				yield return item;
		}
	}

#>