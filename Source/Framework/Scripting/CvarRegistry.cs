//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by the Pegasus Asset Compiler.
//     Wednesday, May 29, 2013, 14:11:21
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;

namespace Pegasus.Framework.Scripting
{
	using Pegasus.Framework;
	using Platform;

	public partial class CvarRegistry : Registry<ICvar>
	{
		/// <summary>
		///   Provides access to the actual instances of the cvars or commands managed by the registry.
		/// </summary>
		public new InstanceList Instances { get; private set; }

		/// <summary>
		///   The scaling factor that is applied to all timing values.
		/// </summary>
		public double TimeScale
		{
			get { return Instances.TimeScale.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value);
				Instances.TimeScale.Value = value;
			}
		}

		/// <summary>
		///   The width of the screen resolution used by the application in fullscreen mode. Any changes to this cvar require a
		///   restart of the graphics subsystem.
		/// </summary>
		public int ResolutionWidth
		{
			get { return Instances.ResolutionWidth.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value);
				Instances.ResolutionWidth.Value = value;
			}
		}

		/// <summary>
		///   The height of the screen resolution used by the application in fullscreen mode. Any changes to this cvar require a
		///   restart of the graphics subsystem.
		/// </summary>
		public int ResolutionHeight
		{
			get { return Instances.ResolutionHeight.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value);
				Instances.ResolutionHeight.Value = value;
			}
		}

		/// <summary>
		///   If true, the application is run in fullscreen mode. Any changes to this cvar require a restart of the graphics
		///   subsystem.
		/// </summary>
		public bool Fullscreen
		{
			get { return Instances.Fullscreen.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value);
				Instances.Fullscreen.Value = value;
			}
		}

		/// <summary>
		///   The width of the application's window in non-fullscreen mode.
		/// </summary>
		public int WindowWidth
		{
			get { return Instances.WindowWidth.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value);
				Instances.WindowWidth.Value = value;
			}
		}

		/// <summary>
		///   The height of the application's window in non-fullscreen mode.
		/// </summary>
		public int WindowHeight
		{
			get { return Instances.WindowHeight.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value);
				Instances.WindowHeight.Value = value;
			}
		}

		/// <summary>
		///   Initializes the registry.
		/// </summary>
		protected override void Initialize(object instances)
		{
			if (instances == null)
				instances = new InstanceList();

			Instances = (InstanceList)instances;
			base.Initialize(instances);

			Register(Instances.TimeScale, "time_scale");
			Register(Instances.ResolutionWidth, "resolution_width");
			Register(Instances.ResolutionHeight, "resolution_height");
			Register(Instances.Fullscreen, "fullscreen");
			Register(Instances.WindowWidth, "window_width");
			Register(Instances.WindowHeight, "window_height");
		}

		/// <summary>
		///   Stores the actual instances of the cvars or commands managed by the registry.
		/// </summary>
		public new class InstanceList : Registry<ICvar>.InstanceList
		{
			/// <summary>
			///   Initializes a new instance.
			/// </summary>
			public InstanceList()
			{
				TimeScale = new Cvar<double>("time_scale", 1.0, "The scaling factor that is applied to all timing values.", UpdateMode.Immediate, false, new RangeAttribute(0.1, 10.0));
				ResolutionWidth = new Cvar<int>("resolution_width", 1024, "The width of the screen resolution used by the application in fullscreen mode. Any changes to this cvar require a restart of the graphics subsystem.", UpdateMode.OnGraphicsRestart, true, new RangeAttribute(320, 4096));
				ResolutionHeight = new Cvar<int>("resolution_height", 768, "The height of the screen resolution used by the application in fullscreen mode. Any changes to this cvar require a restart of the graphics subsystem.", UpdateMode.OnGraphicsRestart, true, new RangeAttribute(240, 4096));
				Fullscreen = new Cvar<bool>("fullscreen", !PlatformInfo.IsDebug, "If true, the application is run in fullscreen mode. Any changes to this cvar require a restart of the graphics subsystem.", UpdateMode.OnGraphicsRestart, true);
				WindowWidth = new Cvar<int>("window_width", 640, "The width of the application's window in non-fullscreen mode.", UpdateMode.Immediate, true, new RangeAttribute(320, 4096));
				WindowHeight = new Cvar<int>("window_height", 360, "The height of the application's window in non-fullscreen mode.", UpdateMode.Immediate, true, new RangeAttribute(240, 4096));
			}

			/// <summary>
			///   The scaling factor that is applied to all timing values.
			/// </summary>
			public Cvar<double> TimeScale { get; private set; }

			/// <summary>
			///   The width of the screen resolution used by the application in fullscreen mode. Any changes to this cvar require a
			///   restart of the graphics subsystem.
			/// </summary>
			public Cvar<int> ResolutionWidth { get; private set; }

			/// <summary>
			///   The height of the screen resolution used by the application in fullscreen mode. Any changes to this cvar require a
			///   restart of the graphics subsystem.
			/// </summary>
			public Cvar<int> ResolutionHeight { get; private set; }

			/// <summary>
			///   If true, the application is run in fullscreen mode. Any changes to this cvar require a restart of the graphics
			///   subsystem.
			/// </summary>
			public Cvar<bool> Fullscreen { get; private set; }

			/// <summary>
			///   The width of the application's window in non-fullscreen mode.
			/// </summary>
			public Cvar<int> WindowWidth { get; private set; }

			/// <summary>
			///   The height of the application's window in non-fullscreen mode.
			/// </summary>
			public Cvar<int> WindowHeight { get; private set; }
		}
	}
}

