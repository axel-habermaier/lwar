//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by the Pegasus Asset Compiler.
//     Thursday, April 4, 2013, 16:48:21
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace Pegasus.Framework.Scripting
{
	using Platform;

	public class CvarRegistry : Registry<ICvar>
	{
		/// <summary>
		///   The name of the player that identifies the player in networked games.
		/// </summary>
		private readonly Cvar<string> _playerName = new Cvar<string>("player_name", "UnnamedPlayer", "The name of the player that identifies the player in networked games.");

		/// <summary>
		///   If enabled, network debug output is printed to the console.
		/// </summary>
		private readonly Cvar<bool> _networkDebugging = new Cvar<bool>("network_debugging", PlatformInfo.IsDebug, "If enabled, network debug output is printed to the console.");

		/// <summary>
		///   The scaling factor that is applied to all timing values.
		/// </summary>
		private readonly Cvar<double> _timeScale = new Cvar<double>("time_scale", 1.0, "The scaling factor that is applied to all timing values.");

		/// <summary>
		///   Initializes a new instance.
		/// </summary>
		public CvarRegistry()
		{
			Register(_playerName, "player_name");
			Register(_networkDebugging, "network_debugging");
			Register(_timeScale, "time_scale");
		}

		/// <summary>
		///   The name of the player that identifies the player in networked games.
		/// </summary>
		public string PlayerName
		{
			get { return _playerName.Value; }
			set { _playerName.Value = value; }
		}

		/// <summary>
		///   If enabled, network debug output is printed to the console.
		/// </summary>
		public bool NetworkDebugging
		{
			get { return _networkDebugging.Value; }
			set { _networkDebugging.Value = value; }
		}

		/// <summary>
		///   The scaling factor that is applied to all timing values.
		/// </summary>
		public double TimeScale
		{
			get { return _timeScale.Value; }
			set { _timeScale.Value = value; }
		}
	}
}

