//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by the Pegasus Asset Compiler.
//     Thursday, April 4, 2013, 12:31:46
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace Pegasus.Framework.Scripting
{
	using Platform;
	using Platform.Input;

	public class CvarRegistry2 : CvarRegistry
	{
		/// <summary>
		///   The applications major version number.
		/// </summary>
		private readonly Cvar<int> _appVersionMajor = new Cvar<int>("app_version_major", , "The applications major version number.");

		/// <summary>
		///   The applications minor version number.
		/// </summary>
		private readonly Cvar<int> _appVersionMinor = new Cvar<int>("app_version_minor", , "The applications minor version number.");

		/// <summary>
		///   The application's name.
		/// </summary>
		private readonly Cvar<string> _appName = new Cvar<string>("app_name", , "The application's name.");

		/// <summary>
		///   The name of the player.
		/// </summary>
		private readonly Cvar<string> _playerName = new Cvar<string>("player_name", , "The name of the player.");

		/// <summary>
		///   A cvar that indicates whether network debugging is enabled.
		/// </summary>
		private readonly Cvar<bool> _networkDebugging = new Cvar<bool>("network_debugging", , "A cvar that indicates whether network debugging is enabled.");

		/// <summary>
		///   The scaling factor that is applied to all timing values.
		/// </summary>
		private readonly Cvar<double> _timeScaleFactor = new Cvar<double>("time_scale_factor", , "The scaling factor that is applied to all timing values.");

		/// <summary>
		///   Exits the application when invoked.
		/// </summary>
		private readonly Command _exit = new Command("exit", "Exits the application when invoked.");

		/// <summary>
		///   Executes the given argument.
		/// </summary>
		private readonly Command<string> _execute = new Command<string>("execute", "Executes the given argument.");

		/// <summary>
		///   Binds a command invocation to a logical input. Whenever the input is triggered, the command is invoked with the specified arguments.
		/// </summary>
		private readonly Command<InputTrigger, string> _bind = new Command<InputTrigger, string>("bind", "Binds a command invocation to a logical input. Whenever the input is triggered, the command is invoked with the specified arguments.");

		/// <summary>
		///   Shows or hides the console.
		/// </summary>
		private readonly Command<bool> _showConsole = new Command<bool>("show_console", "Shows or hides the console.");

		/// <summary>
		///   Reloads all changed assets.
		/// </summary>
		private readonly Command _reloadAssets = new Command("reload_assets", "Reloads all changed assets.");

		/// <summary>
		///   Initializes a new instance.
		/// </summary>
		public CvarRegistry2()
		{
			Register(_appVersionMajor);
			Register(_appVersionMinor);
			Register(_appName);
			Register(_playerName);
			Register(_networkDebugging);
			Register(_timeScaleFactor);

			Register(_exit);
			Register(_execute);
			Register(_bind);
			Register(_showConsole);
			Register(_reloadAssets);
		}
		/// <summary>
		///   Exits the application when invoked.
		/// </summary>
		public void Exit()
		{
		}

		/// <summary>
		///   Executes the given argument.
		/// </summary>
		/// <param name="command">
		///   The command that should be executed. It will be executed immediately, synchronously, so don't
		///   exepcted any fancy stuff to happen!
		/// </param>
		public void Execute()
		{
		}

		/// <summary>
		///   Binds a command invocation to a logical input. Whenever the input is triggered, the command is invoked with the
		///   specified arguments.
		/// </summary>
		/// <param name="trigger">The trigger that triggers the command.</param>
		/// <param name="command">The command (including the arguments) that should be executed when the trigger is fired.</param>
		public void Bind()
		{
		}

		/// <summary>
		///   Shows or hides the console.
		/// </summary>
		/// <param name="show">A value of 'true' indicates that the console should be shown.</param>
		public void ShowConsole()
		{
		}

		/// <summary>
		///   Reloads all changed assets.
		/// </summary>
		public void ReloadAssets()
		{
		}

		/// <summary>
		///   Raised when the Exit command is invoked.
		/// </summary>
		public event Action OnExit
		{
			add { _exit.Invoked += value; }
			remove { _exit.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the Execute command is invoked.
		/// </summary>
		public event Action<string> OnExecute
		{
			add { _execute.Invoked += value; }
			remove { _execute.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the Bind command is invoked.
		/// </summary>
		public event Action<InputTrigger, string> OnBind
		{
			add { _bind.Invoked += value; }
			remove { _bind.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the ShowConsole command is invoked.
		/// </summary>
		public event Action<bool> OnShowConsole
		{
			add { _showConsole.Invoked += value; }
			remove { _showConsole.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the ReloadAssets command is invoked.
		/// </summary>
		public event Action OnReloadAssets
		{
			add { _reloadAssets.Invoked += value; }
			remove { _reloadAssets.Invoked -= value; }
		}

	}
}
