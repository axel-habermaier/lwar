//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by the Pegasus Asset Compiler.
//     Tuesday, June 4, 2013, 9:36:26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;

namespace Pegasus.Framework.Scripting
{
	using Pegasus.Framework;
	using Pegasus.Framework.Platform;
	using Pegasus.Framework.Platform.Logging;
	using Pegasus.Framework.Scripting;

	internal static class Cvars
	{
		/// <summary>
		///   The scaling factor that is applied to all timing values.
		/// </summary>
		public static Cvar<double> TimeScaleCvar { get; private set; }

		/// <summary>
		///   The width of the screen resolution used by the application in fullscreen mode. Any changes to this cvar require a
		///   restart of the graphics subsystem.
		/// </summary>
		public static Cvar<int> ResolutionWidthCvar { get; private set; }

		/// <summary>
		///   The height of the screen resolution used by the application in fullscreen mode. Any changes to this cvar require a
		///   restart of the graphics subsystem.
		/// </summary>
		public static Cvar<int> ResolutionHeightCvar { get; private set; }

		/// <summary>
		///   If true, the application is run in fullscreen mode. Any changes to this cvar require a restart of the graphics
		///   subsystem.
		/// </summary>
		public static Cvar<bool> FullscreenCvar { get; private set; }

		/// <summary>
		///   The width of the application's window in non-fullscreen mode.
		/// </summary>
		public static Cvar<int> WindowWidthCvar { get; private set; }

		/// <summary>
		///   The height of the application's window in non-fullscreen mode.
		/// </summary>
		public static Cvar<int> WindowHeightCvar { get; private set; }

		/// <summary>
		///   Shows or hides the statistics.
		/// </summary>
		public static Cvar<bool> ShowStatsCvar { get; private set; }

		/// <summary>
		///   The scaling factor that is applied to all timing values.
		/// </summary>
		public static double TimeScale
		{
			get { return TimeScaleCvar.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value);
				TimeScaleCvar.Value = value;
			}
		}

		/// <summary>
		///   The width of the screen resolution used by the application in fullscreen mode. Any changes to this cvar require a
		///   restart of the graphics subsystem.
		/// </summary>
		public static int ResolutionWidth
		{
			get { return ResolutionWidthCvar.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value);
				ResolutionWidthCvar.Value = value;
			}
		}

		/// <summary>
		///   The height of the screen resolution used by the application in fullscreen mode. Any changes to this cvar require a
		///   restart of the graphics subsystem.
		/// </summary>
		public static int ResolutionHeight
		{
			get { return ResolutionHeightCvar.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value);
				ResolutionHeightCvar.Value = value;
			}
		}

		/// <summary>
		///   If true, the application is run in fullscreen mode. Any changes to this cvar require a restart of the graphics
		///   subsystem.
		/// </summary>
		public static bool Fullscreen
		{
			get { return FullscreenCvar.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value);
				FullscreenCvar.Value = value;
			}
		}

		/// <summary>
		///   The width of the application's window in non-fullscreen mode.
		/// </summary>
		public static int WindowWidth
		{
			get { return WindowWidthCvar.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value);
				WindowWidthCvar.Value = value;
			}
		}

		/// <summary>
		///   The height of the application's window in non-fullscreen mode.
		/// </summary>
		public static int WindowHeight
		{
			get { return WindowHeightCvar.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value);
				WindowHeightCvar.Value = value;
			}
		}

		/// <summary>
		///   Shows or hides the statistics.
		/// </summary>
		public static bool ShowStats
		{
			get { return ShowStatsCvar.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value);
				ShowStatsCvar.Value = value;
			}
		}

		/// <summary>
		///   Raised when the 'TimeScale' cvar is changing. The new value is passed to the event handler.
		/// </summary>
		public static event Action<double> TimeScaleChanging
		{
			add { TimeScaleCvar.Changing += value; }
			remove { TimeScaleCvar.Changing -= value; }
		}

		/// <summary>
		///   Raised when the 'TimeScale' cvar is changed. The previous value is passed to the event handler.
		/// </summary>
		public static event Action<double> TimeScaleChanged
		{
			add { TimeScaleCvar.Changed += value; }
			remove { TimeScaleCvar.Changed -= value; }
		}

		/// <summary>
		///   Raised when the 'ResolutionWidth' cvar is changing. The new value is passed to the event handler.
		/// </summary>
		public static event Action<int> ResolutionWidthChanging
		{
			add { ResolutionWidthCvar.Changing += value; }
			remove { ResolutionWidthCvar.Changing -= value; }
		}

		/// <summary>
		///   Raised when the 'ResolutionWidth' cvar is changed. The previous value is passed to the event handler.
		/// </summary>
		public static event Action<int> ResolutionWidthChanged
		{
			add { ResolutionWidthCvar.Changed += value; }
			remove { ResolutionWidthCvar.Changed -= value; }
		}

		/// <summary>
		///   Raised when the 'ResolutionHeight' cvar is changing. The new value is passed to the event handler.
		/// </summary>
		public static event Action<int> ResolutionHeightChanging
		{
			add { ResolutionHeightCvar.Changing += value; }
			remove { ResolutionHeightCvar.Changing -= value; }
		}

		/// <summary>
		///   Raised when the 'ResolutionHeight' cvar is changed. The previous value is passed to the event handler.
		/// </summary>
		public static event Action<int> ResolutionHeightChanged
		{
			add { ResolutionHeightCvar.Changed += value; }
			remove { ResolutionHeightCvar.Changed -= value; }
		}

		/// <summary>
		///   Raised when the 'Fullscreen' cvar is changing. The new value is passed to the event handler.
		/// </summary>
		public static event Action<bool> FullscreenChanging
		{
			add { FullscreenCvar.Changing += value; }
			remove { FullscreenCvar.Changing -= value; }
		}

		/// <summary>
		///   Raised when the 'Fullscreen' cvar is changed. The previous value is passed to the event handler.
		/// </summary>
		public static event Action<bool> FullscreenChanged
		{
			add { FullscreenCvar.Changed += value; }
			remove { FullscreenCvar.Changed -= value; }
		}

		/// <summary>
		///   Raised when the 'WindowWidth' cvar is changing. The new value is passed to the event handler.
		/// </summary>
		public static event Action<int> WindowWidthChanging
		{
			add { WindowWidthCvar.Changing += value; }
			remove { WindowWidthCvar.Changing -= value; }
		}

		/// <summary>
		///   Raised when the 'WindowWidth' cvar is changed. The previous value is passed to the event handler.
		/// </summary>
		public static event Action<int> WindowWidthChanged
		{
			add { WindowWidthCvar.Changed += value; }
			remove { WindowWidthCvar.Changed -= value; }
		}

		/// <summary>
		///   Raised when the 'WindowHeight' cvar is changing. The new value is passed to the event handler.
		/// </summary>
		public static event Action<int> WindowHeightChanging
		{
			add { WindowHeightCvar.Changing += value; }
			remove { WindowHeightCvar.Changing -= value; }
		}

		/// <summary>
		///   Raised when the 'WindowHeight' cvar is changed. The previous value is passed to the event handler.
		/// </summary>
		public static event Action<int> WindowHeightChanged
		{
			add { WindowHeightCvar.Changed += value; }
			remove { WindowHeightCvar.Changed -= value; }
		}

		/// <summary>
		///   Raised when the 'ShowStats' cvar is changing. The new value is passed to the event handler.
		/// </summary>
		public static event Action<bool> ShowStatsChanging
		{
			add { ShowStatsCvar.Changing += value; }
			remove { ShowStatsCvar.Changing -= value; }
		}

		/// <summary>
		///   Raised when the 'ShowStats' cvar is changed. The previous value is passed to the event handler.
		/// </summary>
		public static event Action<bool> ShowStatsChanged
		{
			add { ShowStatsCvar.Changed += value; }
			remove { ShowStatsCvar.Changed -= value; }
		}

		/// <summary>
		///   Initializes the instances declared by the registry.
		/// </summary>
		public static void Initialize()
		{
			TimeScaleCvar = new Cvar<double>("time_scale", 1.0, "The scaling factor that is applied to all timing values.", UpdateMode.Immediate, false, new RangeAttribute(0.1, 10.0));
			ResolutionWidthCvar = new Cvar<int>("resolution_width", 1024, "The width of the screen resolution used by the application in fullscreen mode. Any changes to this cvar require a restart of the graphics subsystem.", UpdateMode.OnGraphicsRestart, true, new RangeAttribute(320, 4096));
			ResolutionHeightCvar = new Cvar<int>("resolution_height", 768, "The height of the screen resolution used by the application in fullscreen mode. Any changes to this cvar require a restart of the graphics subsystem.", UpdateMode.OnGraphicsRestart, true, new RangeAttribute(240, 4096));
			FullscreenCvar = new Cvar<bool>("fullscreen", !PlatformInfo.IsDebug, "If true, the application is run in fullscreen mode. Any changes to this cvar require a restart of the graphics subsystem.", UpdateMode.OnGraphicsRestart, true);
			WindowWidthCvar = new Cvar<int>("window_width", 640, "The width of the application's window in non-fullscreen mode.", UpdateMode.Immediate, true, new RangeAttribute(320, 4096));
			WindowHeightCvar = new Cvar<int>("window_height", 360, "The height of the application's window in non-fullscreen mode.", UpdateMode.Immediate, true, new RangeAttribute(240, 4096));
			ShowStatsCvar = new Cvar<bool>("show_stats", PlatformInfo.IsDebug, "Shows or hides the statistics.", UpdateMode.Immediate, true);

			CvarRegistry.Register(TimeScaleCvar);
			CvarRegistry.Register(ResolutionWidthCvar);
			CvarRegistry.Register(ResolutionHeightCvar);
			CvarRegistry.Register(FullscreenCvar);
			CvarRegistry.Register(WindowWidthCvar);
			CvarRegistry.Register(WindowHeightCvar);
			CvarRegistry.Register(ShowStatsCvar);
		}

		/// <summary>
		///   Initializes the instances imported by the registry.
		/// </summary>
		public static void Resolve()
		{
		}
	}
}

