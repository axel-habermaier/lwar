<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)Dependencies/ICSharpCode.NRefactory.dll" #>
<#@ assembly name="$(SolutionDir)Dependencies/ICSharpCode.NRefactory.CSharp.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ICSharpCode.NRefactory" #>
<#@ import namespace="ICSharpCode.NRefactory.CSharp" #>
<#@ import namespace="ICSharpCode.NRefactory.CSharp.Resolver" #>
<#@ import namespace="ICSharpCode.NRefactory.TypeSystem" #>
<#@ output extension=".cs" #>

<#= Parse("Cvars_old.cs").Descendants.OfType<TypeDeclaration>().Where(t=>t.ClassType==ClassType.Interface).First().Name #>

<#+

	AstNode Parse(string file)
	{
		var parser = new CSharpParser();
		var syntaxTree = parser.Parse(File.ReadAllText(Host.ResolvePath(file)), file);

		if (parser.HasErrors)
			throw new InvalidOperationException(file + " contains errors.");

		return syntaxTree;
	}

#>