//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by the Pegasus Asset Compiler.
//     Thursday, April 4, 2013, 16:48:20
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace Pegasus.Framework.Scripting
{
	using Platform.Input;

	public class CommandRegistry : Registry<ICommand>
	{
		/// <summary>
		///   Immediately exits the application.
		/// </summary>
		private readonly Command _exit = new Command("exit", "Immediately exits the application.");

		/// <summary>
		///   Executes the given argument.
		/// </summary>
		private readonly Command<string> _execute = new Command<string>("execute", "Executes the given argument.");

		/// <summary>
		///   Binds a command invocation to a logical input. Whenever the input is triggered, the command is invoked with the specified arguments.
		/// </summary>
		private readonly Command<InputTrigger, string> _bind = new Command<InputTrigger, string>("bind", "Binds a command invocation to a logical input. Whenever the input is triggered, the command is invoked with the specified arguments.");

		/// <summary>
		///   Shows or hides the console.
		/// </summary>
		private readonly Command<bool> _showConsole = new Command<bool>("show_console", "Shows or hides the console.");

		/// <summary>
		///   Reloads all changed assets.
		/// </summary>
		private readonly Command _reloadAssets = new Command("reload_assets", "Reloads all changed assets.");

		/// <summary>
		///   Initializes a new instance.
		/// </summary>
		public CommandRegistry()
		{
			Register(_exit, "exit");
			Register(_execute, "execute");
			Register(_bind, "bind");
			Register(_showConsole, "show_console");
			Register(_reloadAssets, "reload_assets");
		}

		/// <summary>
		///   Immediately exits the application.
		/// </summary>
		public void Exit()
		{
			_exit.Invoke();
		}

		/// <summary>
		///   Executes the given argument.
		/// </summary>
		/// <param name="command">
		///   The command that should be executed. It will be executed immediately, synchronously, so don't
		///   exepcted any fancy stuff to happen!
		/// </param>
		public void Execute(string command)
		{
			_execute.Invoke(command);
		}

		/// <summary>
		///   Binds a command invocation to a logical input. Whenever the input is triggered, the command is invoked with the
		///   specified arguments.
		/// </summary>
		/// <param name="trigger">The trigger that triggers the command.</param>
		/// <param name="command">The command (including the arguments) that should be executed when the trigger is fired.</param>
		public void Bind(InputTrigger trigger, string command)
		{
			_bind.Invoke(trigger, command);
		}

		/// <summary>
		///   Shows or hides the console.
		/// </summary>
		/// <param name="show">A value of 'true' indicates that the console should be shown.</param>
		public void ShowConsole(bool show)
		{
			_showConsole.Invoke(show);
		}

		/// <summary>
		///   Reloads all changed assets.
		/// </summary>
		public void ReloadAssets()
		{
			_reloadAssets.Invoke();
		}

		/// <summary>
		///   Raised when the Exit command is invoked.
		/// </summary>
		public event Action OnExit
		{
			add { _exit.Invoked += value; }
			remove { _exit.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the Execute command is invoked.
		/// </summary>
		public event Action<string> OnExecute
		{
			add { _execute.Invoked += value; }
			remove { _execute.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the Bind command is invoked.
		/// </summary>
		public event Action<InputTrigger, string> OnBind
		{
			add { _bind.Invoked += value; }
			remove { _bind.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the ShowConsole command is invoked.
		/// </summary>
		public event Action<bool> OnShowConsole
		{
			add { _showConsole.Invoked += value; }
			remove { _showConsole.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the ReloadAssets command is invoked.
		/// </summary>
		public event Action OnReloadAssets
		{
			add { _reloadAssets.Invoked += value; }
			remove { _reloadAssets.Invoked -= value; }
		}
	}
}

