//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by the Pegasus Asset Compiler.
//     Friday, April 5, 2013, 15:49:52
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace Pegasus.Framework.Scripting
{
	using Platform.Input;

	public class CommandRegistry : Registry<ICommand>
	{
		/// <summary>
		///   Provides access to the actual instances of the cvars or commands managed by the registry.
		/// </summary>
		public new InstanceList Instances { get; private set; }

		/// <summary>
		///   Immediately exits the application.
		/// </summary>
		public void Exit()
		{
			Instances.Exit.Invoke();
		}

		/// <summary>
		///   Executes the given argument.
		/// </summary>
		/// <param name="command">
		///   The command that should be executed. It will be executed immediately, synchronously, so don't
		///   exepcted any fancy stuff to happen!
		/// </param>
		public void Execute(string command)
		{
			Instances.Execute.Invoke(command);
		}

		/// <summary>
		///   Processes the commands in the given file.
		/// </summary>
		/// <param name="fileName">The name of the file in the application's user directory that should be processed.</param>
		public void Process(string fileName)
		{
			Instances.Process.Invoke(fileName);
		}

		/// <summary>
		///   Saves the persistent cvars into the given file.
		/// </summary>
		/// <param name="fileName">The name of the file in the application's user directory the cvars should be written to.</param>
		public void Persist(string fileName)
		{
			Instances.Persist.Invoke(fileName);
		}

		/// <summary>
		///   Binds a command invocation to a logical input. Whenever the input is triggered, the command is invoked with the
		///   specified arguments.
		/// </summary>
		/// <param name="trigger">The trigger that triggers the command.</param>
		/// <param name="command">The command (including the arguments) that should be executed when the trigger is fired.</param>
		public void Bind(InputTrigger trigger, string command)
		{
			Instances.Bind.Invoke(trigger, command);
		}

		/// <summary>
		///   Shows or hides the console.
		/// </summary>
		/// <param name="show">A value of 'true' indicates that the console should be shown.</param>
		public void ShowConsole(bool show)
		{
			Instances.ShowConsole.Invoke(show);
		}

		/// <summary>
		///   Reloads all changed assets.
		/// </summary>
		public void ReloadAssets()
		{
			Instances.ReloadAssets.Invoke();
		}

		/// <summary>
		///   Raised when the Exit command is invoked.
		/// </summary>
		public event Action OnExit
		{
			add { Instances.Exit.Invoked += value; }
			remove { Instances.Exit.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the Execute command is invoked.
		/// </summary>
		public event Action<string> OnExecute
		{
			add { Instances.Execute.Invoked += value; }
			remove { Instances.Execute.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the Process command is invoked.
		/// </summary>
		public event Action<string> OnProcess
		{
			add { Instances.Process.Invoked += value; }
			remove { Instances.Process.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the Persist command is invoked.
		/// </summary>
		public event Action<string> OnPersist
		{
			add { Instances.Persist.Invoked += value; }
			remove { Instances.Persist.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the Bind command is invoked.
		/// </summary>
		public event Action<InputTrigger, string> OnBind
		{
			add { Instances.Bind.Invoked += value; }
			remove { Instances.Bind.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the ShowConsole command is invoked.
		/// </summary>
		public event Action<bool> OnShowConsole
		{
			add { Instances.ShowConsole.Invoked += value; }
			remove { Instances.ShowConsole.Invoked -= value; }
		}

		/// <summary>
		///   Raised when the ReloadAssets command is invoked.
		/// </summary>
		public event Action OnReloadAssets
		{
			add { Instances.ReloadAssets.Invoked += value; }
			remove { Instances.ReloadAssets.Invoked -= value; }
		}

		/// <summary>
		///   Initializes the registry.
		/// </summary>
		protected override void Initialize(object instances)
		{
			if (instances == null)
				instances = new InstanceList();

			Instances = (InstanceList)instances;
			base.Initialize(instances);

			Register(Instances.Exit, "exit");
			Register(Instances.Execute, "execute");
			Register(Instances.Process, "process");
			Register(Instances.Persist, "persist");
			Register(Instances.Bind, "bind");
			Register(Instances.ShowConsole, "show_console");
			Register(Instances.ReloadAssets, "reload_assets");
		}

		/// <summary>
		///   Stores the actual instances of the cvars or commands managed by the registry.
		/// </summary>
		public new class InstanceList : Registry<ICommand>.InstanceList
		{
			/// <summary>
			///   Initializes a new instance.
			/// </summary>
			public InstanceList()
			{
				Exit = new Command("exit", "Immediately exits the application.");
				Execute = new Command<string>("execute", "Executes the given argument.", 
					new CommandParameter("command", typeof(string), false, default(string), "The command that should be executed. It will be executed immediately, synchronously, so don't exepcted any fancy stuff to happen!"));
				Process = new Command<string>("process", "Processes the commands in the given file.", 
					new CommandParameter("fileName", typeof(string), false, default(string), "The name of the file in the application's user directory that should be processed."));
				Persist = new Command<string>("persist", "Saves the persistent cvars into the given file.", 
					new CommandParameter("fileName", typeof(string), false, default(string), "The name of the file in the application's user directory the cvars should be written to."));
				Bind = new Command<InputTrigger, string>("bind", "Binds a command invocation to a logical input. Whenever the input is triggered, the command is invoked with the specified arguments.", 
					new CommandParameter("trigger", typeof(InputTrigger), false, default(InputTrigger), "The trigger that triggers the command."), 
					new CommandParameter("command", typeof(string), false, default(string), "The command (including the arguments) that should be executed when the trigger is fired."));
				ShowConsole = new Command<bool>("show_console", "Shows or hides the console.", 
					new CommandParameter("show", typeof(bool), false, default(bool), "A value of 'true' indicates that the console should be shown."));
				ReloadAssets = new Command("reload_assets", "Reloads all changed assets.");
			}

			/// <summary>
			///   Immediately exits the application.
			/// </summary>
			public Command Exit { get; private set; }

			/// <summary>
			///   Executes the given argument.
			/// </summary>
			public Command<string> Execute { get; private set; }

			/// <summary>
			///   Processes the commands in the given file.
			/// </summary>
			public Command<string> Process { get; private set; }

			/// <summary>
			///   Saves the persistent cvars into the given file.
			/// </summary>
			public Command<string> Persist { get; private set; }

			/// <summary>
			///   Binds a command invocation to a logical input. Whenever the input is triggered, the command is invoked with the specified arguments.
			/// </summary>
			public Command<InputTrigger, string> Bind { get; private set; }

			/// <summary>
			///   Shows or hides the console.
			/// </summary>
			public Command<bool> ShowConsole { get; private set; }

			/// <summary>
			///   Reloads all changed assets.
			/// </summary>
			public Command ReloadAssets { get; private set; }
		}
	}
}

