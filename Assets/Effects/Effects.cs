//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by Pegasus Asset Compiler, version 0.1
//     Monday, 01 April 2013, 02:38:12
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;
using Pegasus.Framework;
using Pegasus.Framework.Math;
using Pegasus.Framework.Platform.Graphics;

namespace Lwar.Assets.Effects
{
	public sealed class BlurEffect
	{
		public BlurEffect(GraphicsDevice graphicsDevice)
		{
		}

		public Texture2D Texture { get; set; }

		private unsafe void BindGraphicsObjects()
		{
			Assert.NotNull(Texture, "Texture object 'Texture' has not been set.");
			Texture.Bind(0);
		}
	}
}

namespace Lwar.Assets.Effects
{
	public sealed class SkyboxEffect
	{
		public SkyboxEffect(GraphicsDevice graphicsDevice)
		{
		}

		public CubeMap Skybox { get; set; }

		private unsafe void BindGraphicsObjects()
		{
			Assert.NotNull(Skybox, "Texture object 'Skybox' has not been set.");
			Skybox.Bind(0);
		}
	}
}

namespace Lwar.Assets.Effects
{
	public sealed class SphereEffect
	{
		private bool _dirtyConstantBuffer2 = true;

		private readonly ConstantBuffer _constantBuffer2;

		private Matrix _world;

		public SphereEffect(GraphicsDevice graphicsDevice)
		{
			_constantBuffer2 = new ConstantBuffer(graphicsDevice, 64);
		}

		public Matrix World
		{
			get { return _world; }
			set
			{
				_world = value;
				_dirtyConstantBuffer2 = true;
			}
		}

		public CubeMap SphereTexture { get; set; }

		private unsafe void BindGraphicsObjects()
		{
			Assert.NotNull(SphereTexture, "Texture object 'SphereTexture' has not been set.");
			SphereTexture.Bind(0);

			if (_dirtyConstantBuffer2)
			{
				ConstantBuffer2 data = new ConstantBuffer2();
				data.World = World;

				_dirtyConstantBuffer2 = false;
				_constantBuffer2.CopyData(&data);
			}

			_constantBuffer2.Bind(2);
		}

		[StructLayout(LayoutKind.Sequential, Size = 64)]
		private struct ConstantBuffer2
		{
			public Matrix World;
		}
	}
}

namespace Lwar.Assets.Effects
{
	public sealed class SpriteEffect
	{
		private bool _dirtyConstantBuffer2 = true;

		private readonly ConstantBuffer _constantBuffer2;

		private Matrix _world;

		public SpriteEffect(GraphicsDevice graphicsDevice)
		{
			_constantBuffer2 = new ConstantBuffer(graphicsDevice, 64);
		}

		public Matrix World
		{
			get { return _world; }
			set
			{
				_world = value;
				_dirtyConstantBuffer2 = true;
			}
		}

		public Texture2D Sprite { get; set; }

		private unsafe void BindGraphicsObjects()
		{
			Assert.NotNull(Sprite, "Texture object 'Sprite' has not been set.");
			Sprite.Bind(0);

			if (_dirtyConstantBuffer2)
			{
				ConstantBuffer2 data = new ConstantBuffer2();
				data.World = World;

				_dirtyConstantBuffer2 = false;
				_constantBuffer2.CopyData(&data);
			}

			_constantBuffer2.Bind(2);
		}

		[StructLayout(LayoutKind.Sequential, Size = 64)]
		private struct ConstantBuffer2
		{
			public Matrix World;
		}
	}
}

namespace Lwar.Assets.Effects
{
	public sealed class SunEffect
	{
		private bool _dirtyConstantBuffer2 = true;

		private readonly ConstantBuffer _constantBuffer2;

		private Matrix _rotation1;
		private Matrix _rotation2;
		private Matrix _world;

		public SunEffect(GraphicsDevice graphicsDevice)
		{
			_constantBuffer2 = new ConstantBuffer(graphicsDevice, 192);
		}

		public Matrix Rotation1
		{
			get { return _rotation1; }
			set
			{
				_rotation1 = value;
				_dirtyConstantBuffer2 = true;
			}
		}

		public Matrix Rotation2
		{
			get { return _rotation2; }
			set
			{
				_rotation2 = value;
				_dirtyConstantBuffer2 = true;
			}
		}

		public Matrix World
		{
			get { return _world; }
			set
			{
				_world = value;
				_dirtyConstantBuffer2 = true;
			}
		}

		public CubeMap CubeMap { get; set; }
		public Texture2D HeatMap { get; set; }

		private unsafe void BindGraphicsObjects()
		{
			Assert.NotNull(CubeMap, "Texture object 'CubeMap' has not been set.");
			CubeMap.Bind(0);
			Assert.NotNull(HeatMap, "Texture object 'HeatMap' has not been set.");
			HeatMap.Bind(1);

			if (_dirtyConstantBuffer2)
			{
				ConstantBuffer2 data = new ConstantBuffer2();
				data.Rotation1 = Rotation1;
				data.Rotation2 = Rotation2;
				data.World = World;

				_dirtyConstantBuffer2 = false;
				_constantBuffer2.CopyData(&data);
			}

			_constantBuffer2.Bind(2);
		}

		[StructLayout(LayoutKind.Sequential, Size = 192)]
		private struct ConstantBuffer2
		{
			public Matrix Rotation1;
			public Matrix Rotation2;
			public Matrix World;
		}
	}
}

namespace Lwar.Assets.Effects
{
	public sealed class TexturedQuadEffect
	{
		private bool _dirtyConstantBuffer2 = true;

		private readonly ConstantBuffer _constantBuffer2;

		private Matrix _world;

		public TexturedQuadEffect(GraphicsDevice graphicsDevice)
		{
			_constantBuffer2 = new ConstantBuffer(graphicsDevice, 64);
		}

		public Matrix World
		{
			get { return _world; }
			set
			{
				_world = value;
				_dirtyConstantBuffer2 = true;
			}
		}

		public Texture2D Texture { get; set; }

		private unsafe void BindGraphicsObjects()
		{
			Assert.NotNull(Texture, "Texture object 'Texture' has not been set.");
			Texture.Bind(0);

			if (_dirtyConstantBuffer2)
			{
				ConstantBuffer2 data = new ConstantBuffer2();
				data.World = World;

				_dirtyConstantBuffer2 = false;
				_constantBuffer2.CopyData(&data);
			}

			_constantBuffer2.Bind(2);
		}

		[StructLayout(LayoutKind.Sequential, Size = 64)]
		private struct ConstantBuffer2
		{
			public Matrix World;
		}
	}
}

