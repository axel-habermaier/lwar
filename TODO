Client
========

- Handle ray and circle update messages
- Render all entity types
- Refactor entity system (component-oriented/data parallel/object-oriented entity system hybrid)
- Sun effect
- Render different types of planets
- Skybox
- Nebulae
- Entity interpolation
- Ship/Weapon selection
- Scoreboard
- Chat messages outside of console
- Playernames over ships
- Shield effect
- Weapon effects
- In-game menu
- connect command were the port is optional (and if it is missing, the default server port is used)

Pegasus
========
- C# to HLSL/GLSL cross compiler
- Convert shaders to C#
- Fully support render targets with color and depth/stencil buffers
- DirectX: Construct the shader input layout from the C# shader code instead of using build-time shader reflection
- Implement asset compression (store all assets as a single .zip-file maybe, giving higher priority to files on the filesystem such as Quake?)
- Ensure on app startup that all static cvars are allocated
- CreateShader(void* data, int length, InputLayout* layout, int length)
	-> OpenGL: Ignore layout, read data until \0 is found
	-> D3D: Use layout to generate input layout, byte code starts after first \0; byte code length = (data + length) - location of first \0

Server
========
- server: slots need relative placement wrt ship,
          extend entity type struct for this
- server/Client: entity types, possible weapons, slots
- BUG: Assertion "assert(n == 0);" violated in protocol.c line 302 when server is started twice and client connects (start client and press F1 twice, then F3)
