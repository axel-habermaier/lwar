Client
========
- Effects
	- Different types of planets
	- Nebulae
	- Shield effect
	- Weapon effects
	- Particle system
	- Move skybox
- Entity interpolation
	- Reusable interpolation class?
- UI
	- Ship/Weapon selection
	- Show player names on top of ships
	- Minimap
	- Menus
		* Main menu
		* Server browser
		* Configuration (graphics settings, input settings, ...)
	- Highlight chat messages with different color

Pegasus
========
- Implement asset compression (store all assets as a single .zip-file maybe, giving higher priority to files on the filesystem such as Quake?)
- Linux: Fullscreen mode does not work reliably
- Linux: Set minimum/maximum allowed window size
- Linux: Window key/button event handling
- Linux: Alt+Tab and fullscreen?
- Windows: Alt+Tab out of fullscreen game not behaving nicely
- Statistics: # of draw calls, # of (redundant) state changes, # of textures, etc.
- Move some input state handling to Platform lib
- Allow font color specifiers within texts (e.g., ^r to switch to red)
- Allow emoticons within texts
- Check: Parse command line with string parameters without "" - what happens, i.e. '-cvar hallo welt -test 1'?
- Network: Send network spec revision number with Connect message, send WrongVersion message on version mismatch
- Window subsystem
	- DONE C: Filter out multiple resize-events
	- DONE C: Resize swap chain automatically when window size changes
	- C#-initiated: Toggle fullscreen mode with resolution change, c# must know when not successful (as far as it is possible to tell)
	- C: Fullscreen must be deactivated and reactivated on Alt+Tab
	- C: Restore previous window state (size, position, minimized/maximized) after mode change
	- DONE C: Collect window messages and then execute them afterwards, in order to avoid doing app-related stuff while the wndproc is on the callstack
	- DONE C#: Persist window state (size, position, minimized/maximized) accross game sessions
- Input:
	- Double clicking, key down/up in the same frame, multiple key down/ups in same frame
	- Make sure keys do not 'hang' when application loses focus
	- Mouse click: Use click position!

Server
========
- slots need relative placement wrt ship,
  extend entity type struct for this
- server/client: entity types, possible weapons, slots
- server_init: remove static variables, use dynamic allocation
- server: copy string to player, free memory
