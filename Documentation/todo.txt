Client
========
- Effects
	- Improve planet rendering
	- Nebulae
	- Improve shield effect
	- Weapon effects
	- Move skybox
- Entity interpolation
	- Reusable interpolation class?
- UI
	- Ship/Weapon selection
	- Minimap
	- Menus
		* Main menu
		* Server browser
		* Configuration (graphics settings, input settings, ...)
- Camera zoom bug in very-low FPS situations
- Multiple player names might overlap
- Let camera follow ship (sort of: attach the camera to the ship with a spring)
- Show server network statistics
- Collect and show client network statistics (avg number of times a reliable message was sent/received, # of incoming packets per second, etc.)
- Add debugging capabilities and statistics to network
- Ignore new entities until at least one update message has been received
- Refactor respawning after death

Pegasus.Framework
========
- Track fullscreen resolution changes and add standard timeout-and-reset functionality for invalid resolutions
- Refactor cvar/command system
	* Invoke commands/set cvars on objects (console.visible, window.size, etc.)
	* Add IntelliSense-like code completion for objects and cvars/commands, including when cvars/commands are expected as parameters
	* Add C# expression evaluator (1+1, if-then-else, variables, loops) to console
	* Allow multi-line console input
	* Define cvars/commands as object instances on partial classes, generate code-behind similar to registries nowadays
	* Register instances defining cvars/commands on registries manually
	* Refactor cvar/command parsing to remove object-casts
	* Use Mono.CSharp and allow arbitrary (?) C# code to be executed on the console?
- Add texture quality switch cvar -> asset reloading required
- Particle System

Pegasus.Platform
========
- Linux: Fullscreen mode somewhat buggy when resolution is changed

Assets Compiler
========
- Asset compression
	- Store all assets in one or more .zip-files (decreases asset file size by about 50%)
	- Give higher priorities to files on the filesystem (similar to Quake 3)
- Organize assets into different packages
	- All assets of a package are loaded at the same time
	- Assign offsets per asset per package and use that instead of name at runtime

Network
========

Server
========
- slots need relative placement wrt ship,
  extend entity type struct for this
- server: copy string to player, free memory
- figure out how to communicate amount of ammunition
- BUG: assert(p->a <= p->b); packet.c:39 (?)