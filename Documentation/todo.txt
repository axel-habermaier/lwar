Client
========
- Effects
	- Improve planet rendering
	- Nebulae
	- Improve shield effect
	- Weapon effects
	- Move skybox
- Entity interpolation
	- Reusable interpolation class?
- UI
	- Ship/Weapon selection
	- Minimap
	- Menus
		* Main menu
		* Server browser
		* Configuration (graphics settings, input settings, ...)
- Camera zoom bug in very-low FPS situations
- Multiple player names might overlap
- Let camera follow ship (sort of: attach the camera to the ship with a spring)
- Show server network statistics
- Collect and show client network statistics (avg number of times a reliable message was sent/received, # of incoming packets per second, etc.)
- Add debugging capabilities and statistics to network
- Ignore new entities until at least one update message has been received
- Refactor respawning after death

Pegasus.Framework
========
- Add texture quality switch cvar -> asset reloading required
- Particle System
- UI
	* Events (routed events: http://msdn.microsoft.com/en-us/library/ms742806.aspx, attached events: http://msdn.microsoft.com/en-us/library/bb613550.aspx)
	* Controls: TextBox, Scrollviewer, Combobox, Checkbox, Button, Image
	* Animation System
	* Refactor UI drawing (http://msdn.microsoft.com/en-us/library/ms748373.aspx)
		-> Instead of separate draw calls per layer, use depth tests and layer by z axis in a single draw call
	* Input handling (http://msdn.microsoft.com/en-us/library/ms754010.aspx)
	* Keyboard & logical focus: http://msdn.microsoft.com/en-us/library/aa969768.aspx

Pegasus.Platform
========
- Linux: Fullscreen mode somewhat buggy when resolution is changed
- Drop all display mode change code and instead use fake fullscreen (fullscreen window in desktop resolution, with the app scaling up
  lower resolutions by itself, if necessary)
	* Should work reliably for both Windows/Linux as well as Direct3D/OpenGL
	* Should have much simpler implementation
	* Should allow correct Alt+Tab behavior
	* Potential performance hit and vsync problems

Assets Compiler
========
- Asset compression
	- Store all assets in one or more .zip-files (decreases asset file size by about 50%)
	- Give higher priorities to files on the filesystem (similar to Quake 3)
- Organize assets into different packages
	- All assets of a package are loaded at the same time
	- Assign offsets per asset per package and use that instead of name at runtime
- Compile 3D models (using ASSIMP: http://assimp.sourceforge.net/, https://code.google.com/p/assimp-net/)

Network
========

Server
========
- slots need relative placement wrt ship,
  extend entity type struct for this
- server: copy string to player, free memory
- figure out how to communicate amount of ammunition
- BUG: assert(p->a <= p->b); packet.c:39 (?)